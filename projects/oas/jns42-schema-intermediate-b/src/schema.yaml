$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://schema.JsonSchema42.org/jns42-intermediate-b/schema.json"
title: "JsonSchema42 intermediate schema"
type: object
required:
  - $schema
  - schemas
properties:
  $schema:
    "type": "string"
    "const": "https://schema.JsonSchema42.org/jns42-intermediate-b/schema.json"
  schemas:
    type: object
    additionalProperties: { $ref: "#/$defs/node" }
$defs:
  node:
    type: object
    required:
      - metadata
      - types
      - assertions
      - applicators
    properties:
      context: { $ref: "#/$defs/node-reference" }
      metadata: { $ref: "#/$defs/metadata-section" }
      types: { $ref: "#/$defs/types-section" }
      assertions: { $ref: "#/$defs/assertions-section" }
      applicators: { $ref: "#/$defs/applicators-section" }

  metadata-section:
    description: >
      some meta information about this schema
    type: object
    required:
      - deprecated
    properties:
      title: { $ref: "#/$defs/non-empty-string-value" }
      description: { $ref: "#/$defs/non-empty-string-value" }
      examples:
        type: array
        items: true
      deprecated: { $ref: "#/$defs/boolean-value" }
  types-section:
    description: >
      What types does this schema describe
    type: array
    items:
      type: string
      enum:
        - never
        - any
        - "null"
        - boolean
        - integer
        - number
        - string
        - array
        - map
  assertions-section:
    description: >
      Assertions, per type it is possible that an assertion for a different
      type is present here, that validator may be used when this schema is
      used as an applicator
    type: object
    properties:
      boolean: { $ref: "#/$defs/boolean-assertion" }
      integer: { $ref: "#/$defs/integer-assertion" }
      number: { $ref: "#/$defs/number-assertion" }
      string: { $ref: "#/$defs/string-assertion" }
      array: { $ref: "#/$defs/array-assertion" }
      map: { $ref: "#/$defs/map-assertion" }
  applicators-section:
    description: >
      Applicators apply other schemas to this one
    type: object
    properties:
      reference: { $ref: "#/$defs/node-reference" }
      oneOf:
        type: array
        items: { $ref: "#/$defs/node-reference" }
      anyOf:
        type: array
        items: { $ref: "#/$defs/node-reference" }
      allOf:
        type: array
        items: { $ref: "#/$defs/node-reference" }
      if: { $ref: "#/$defs/node-reference" }
      then: { $ref: "#/$defs/node-reference" }
      else: { $ref: "#/$defs/node-reference" }
      not: { $ref: "#/$defs/node-reference" }
      dependentSchemas:
        type: object
        additionalProperties: { $ref: "#/$defs/node-reference" }
      objectProperties:
        type: object
        additionalProperties: { $ref: "#/$defs/node-reference" }
      mapProperties: { $ref: "#/$defs/node-reference" }
      patternProperties:
        type: object
        additionalProperties: { $ref: "#/$defs/node-reference" }
      propertyNames: { $ref: "#/$defs/node-reference" }
      tupleItems:
        type: array
        items: { $ref: "#/$defs/node-reference" }
      arrayItems: { $ref: "#/$defs/node-reference" }
      contains: { $ref: "#/$defs/node-reference" }

  boolean-assertion:
    type: object
    properties:
      options:
        type: array
        items: { $ref: "#/$defs/boolean-value" }
  integer-assertion:
    type: object
    properties:
      options:
        type: array
        items: { $ref: "#/$defs/integer-value" }
      minimumInclusive: { $ref: "#/$defs/integer-value" }
      minimumExclusive: { $ref: "#/$defs/integer-value" }
      maximumInclusive: { $ref: "#/$defs/integer-value" }
      maximumExclusive: { $ref: "#/$defs/integer-value" }
      multipleOf: { $ref: "#/$defs/integer-value" }
  number-assertion:
    type: object
    properties:
      options:
        type: array
        items: { $ref: "#/$defs/number-value" }
      minimumInclusive: { $ref: "#/$defs/number-value" }
      minimumExclusive: { $ref: "#/$defs/number-value" }
      maximumInclusive: { $ref: "#/$defs/number-value" }
      maximumExclusive: { $ref: "#/$defs/number-value" }
      multipleOf: { $ref: "#/$defs/number-value" }
  string-assertion:
    type: object
    properties:
      options:
        type: array
        items: { $ref: "#/$defs/string-value" }
      minimumLength: { $ref: "#/$defs/amount" }
      maximumLength: { $ref: "#/$defs/amount" }
      valuePattern: { $ref: "#/$defs/non-empty-string-value" }
      valueFormat: { $ref: "#/$defs/non-empty-string-value" }
  array-assertion:
    type: object
    properties:
      minimumItems: { $ref: "#/$defs/amount" }
      maximumItems: { $ref: "#/$defs/amount" }
      uniqueItems:
        type: boolean
  map-assertion:
    type: object
    properties:
      required:
        type: array
        items: { $ref: "#/$defs/string-value" }
        uniqueItems: true
      minimumProperties: { $ref: "#/$defs/amount" }
      maximumProperties: { $ref: "#/$defs/amount" }

  node-reference:
    type: string
    minimumLength: 1
  integer-value:
    type: integer
  number-value:
    type: number
  boolean-value:
    type: boolean
  string-value:
    type: string
  non-empty-string-value:
    type: string
    minimumLength: 1
  amount:
    type: integer
    minimumInclusive: 0
