// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.11.5                         -- www.JsonSchema42.org
//
import * as types from "./types.js";
const currentPath = new Array<string>();
/**
* @summary Core and Validation specifications meta-schema
* @see {@link https://json-schema.org/draft/2020-12/schema}
*/
export function isSchema(value: unknown, pathPart?: string): value is types.Schema {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "$id":
if(!isId(propertyValue)) {
return false;
}
break;
case "$schema":
if(!isCoreSchema(propertyValue)) {
return false;
}
break;
case "$ref":
if(!isRef(propertyValue)) {
return false;
}
break;
case "$anchor":
if(!isAnchor(propertyValue)) {
return false;
}
break;
case "$dynamicRef":
if(!isDynamicRef(propertyValue)) {
return false;
}
break;
case "$dynamicAnchor":
if(!isDynamicAnchor(propertyValue)) {
return false;
}
break;
case "$vocabulary":
if(!isVocabulary(propertyValue)) {
return false;
}
break;
case "$comment":
if(!isComment(propertyValue)) {
return false;
}
break;
case "$defs":
if(!isDefs(propertyValue)) {
return false;
}
break;
case "prefixItems":
if(!isPrefixItems(propertyValue)) {
return false;
}
break;
case "items":
if(!isApplicatorItems(propertyValue)) {
return false;
}
break;
case "contains":
if(!isContains(propertyValue)) {
return false;
}
break;
case "additionalProperties":
if(!isApplicatorAdditionalProperties(propertyValue)) {
return false;
}
break;
case "properties":
if(!isProperties(propertyValue)) {
return false;
}
break;
case "patternProperties":
if(!isPatternProperties(propertyValue)) {
return false;
}
break;
case "dependentSchemas":
if(!isDependentSchemas(propertyValue)) {
return false;
}
break;
case "propertyNames":
if(!isApplicatorPropertyNames(propertyValue)) {
return false;
}
break;
case "if":
if(!isIf(propertyValue)) {
return false;
}
break;
case "then":
if(!isThen(propertyValue)) {
return false;
}
break;
case "else":
if(!isElse(propertyValue)) {
return false;
}
break;
case "allOf":
if(!isAllOf(propertyValue)) {
return false;
}
break;
case "anyOf":
if(!isAnyOf(propertyValue)) {
return false;
}
break;
case "oneOf":
if(!isOneOf(propertyValue)) {
return false;
}
break;
case "not":
if(!isNot(propertyValue)) {
return false;
}
break;
case "unevaluatedItems":
if(!isUnevaluatedItems(propertyValue)) {
return false;
}
break;
case "unevaluatedProperties":
if(!isUnevaluatedProperties(propertyValue)) {
return false;
}
break;
case "type":
if(!isType(propertyValue)) {
return false;
}
break;
case "const":
if(!isConst(propertyValue)) {
return false;
}
break;
case "enum":
if(!isEnum(propertyValue)) {
return false;
}
break;
case "multipleOf":
if(!isMultipleOf(propertyValue)) {
return false;
}
break;
case "maximum":
if(!isMaximum(propertyValue)) {
return false;
}
break;
case "exclusiveMaximum":
if(!isExclusiveMaximum(propertyValue)) {
return false;
}
break;
case "minimum":
if(!isMinimum(propertyValue)) {
return false;
}
break;
case "exclusiveMinimum":
if(!isExclusiveMinimum(propertyValue)) {
return false;
}
break;
case "maxLength":
if(!isMaxLength(propertyValue)) {
return false;
}
break;
case "minLength":
if(!isMinLength(propertyValue)) {
return false;
}
break;
case "pattern":
if(!isPattern(propertyValue)) {
return false;
}
break;
case "maxItems":
if(!isMaxItems(propertyValue)) {
return false;
}
break;
case "minItems":
if(!isMinItems(propertyValue)) {
return false;
}
break;
case "uniqueItems":
if(!isUniqueItems(propertyValue)) {
return false;
}
break;
case "maxContains":
if(!isMaxContains(propertyValue)) {
return false;
}
break;
case "minContains":
if(!isMinContains(propertyValue)) {
return false;
}
break;
case "maxProperties":
if(!isMaxProperties(propertyValue)) {
return false;
}
break;
case "minProperties":
if(!isMinProperties(propertyValue)) {
return false;
}
break;
case "required":
if(!isRequired(propertyValue)) {
return false;
}
break;
case "dependentRequired":
if(!isDependentRequired(propertyValue)) {
return false;
}
break;
case "title":
if(!isTitle(propertyValue)) {
return false;
}
break;
case "description":
if(!isDescription(propertyValue)) {
return false;
}
break;
case "default":
if(!isDefault(propertyValue)) {
return false;
}
break;
case "deprecated":
if(!isDeprecated(propertyValue)) {
return false;
}
break;
case "readOnly":
if(!isReadOnly(propertyValue)) {
return false;
}
break;
case "writeOnly":
if(!isWriteOnly(propertyValue)) {
return false;
}
break;
case "examples":
if(!isExamples(propertyValue)) {
return false;
}
break;
case "format":
if(!isFormat(propertyValue)) {
return false;
}
break;
case "contentEncoding":
if(!isContentEncoding(propertyValue)) {
return false;
}
break;
case "contentMediaType":
if(!isContentMediaType(propertyValue)) {
return false;
}
break;
case "contentSchema":
if(!isContentSchema(propertyValue)) {
return false;
}
break;
case "definitions":
if(!isDefinitions(propertyValue)) {
return false;
}
break;
case "dependencies":
if(!isDependencies(propertyValue)) {
return false;
}
break;
case "$recursiveAnchor":
if(!isRecursiveAnchor(propertyValue)) {
return false;
}
break;
case "$recursiveRef":
if(!isRecursiveRef(propertyValue)) {
return false;
}
break;
}
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "0")
) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "1")
) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/definitions}
* @deprecated
*/
export function isDefinitions(value: unknown, pathPart?: string): value is types.Definitions {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(propertyName, undefined)
) {
return false;
}
if(!isDefinitionsAdditionalProperties(propertyValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/dependencies}
* @deprecated
*/
export function isDependencies(value: unknown, pathPart?: string): value is types.Dependencies {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(propertyName, undefined)
) {
return false;
}
if(!isDependenciesAdditionalProperties(propertyValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/$recursiveAnchor}
* @deprecated
*/
export function isRecursiveAnchor(value: unknown, pathPart?: string): value is types.RecursiveAnchor {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isAnchorString(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/$recursiveRef}
* @deprecated
*/
export function isRecursiveRef(value: unknown, pathPart?: string): value is types.RecursiveRef {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isUriReferenceString(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/0}
*/
export function isAllOf0(value: unknown, pathPart?: string): value is types.AllOf0 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isCore(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/1}
*/
export function isAllOf1(value: unknown, pathPart?: string): value is types.AllOf1 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isApplicator(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/2}
*/
export function isAllOf2(value: unknown, pathPart?: string): value is types.AllOf2 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isUnevaluated(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/3}
*/
export function isAllOf3(value: unknown, pathPart?: string): value is types.AllOf3 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isValidation(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/4}
*/
export function isAllOf4(value: unknown, pathPart?: string): value is types.AllOf4 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isMetaData(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/5}
*/
export function isAllOf5(value: unknown, pathPart?: string): value is types.AllOf5 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isFormatAnnotation(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/6}
*/
export function isAllOf6(value: unknown, pathPart?: string): value is types.AllOf6 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isContent(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/definitions/additionalProperties}
*/
export function isDefinitionsAdditionalProperties(value: unknown, pathPart?: string): value is types.DefinitionsAdditionalProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/dependencies/additionalProperties}
*/
export function isDependenciesAdditionalProperties(value: unknown, pathPart?: string): value is types.DependenciesAdditionalProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(isStringArray(value)) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "$id":
if(!isId(propertyValue)) {
return false;
}
break;
case "$schema":
if(!isCoreSchema(propertyValue)) {
return false;
}
break;
case "$ref":
if(!isRef(propertyValue)) {
return false;
}
break;
case "$anchor":
if(!isAnchor(propertyValue)) {
return false;
}
break;
case "$dynamicRef":
if(!isDynamicRef(propertyValue)) {
return false;
}
break;
case "$dynamicAnchor":
if(!isDynamicAnchor(propertyValue)) {
return false;
}
break;
case "$vocabulary":
if(!isVocabulary(propertyValue)) {
return false;
}
break;
case "$comment":
if(!isComment(propertyValue)) {
return false;
}
break;
case "$defs":
if(!isDefs(propertyValue)) {
return false;
}
break;
case "prefixItems":
if(!isPrefixItems(propertyValue)) {
return false;
}
break;
case "items":
if(!isApplicatorItems(propertyValue)) {
return false;
}
break;
case "contains":
if(!isContains(propertyValue)) {
return false;
}
break;
case "additionalProperties":
if(!isApplicatorAdditionalProperties(propertyValue)) {
return false;
}
break;
case "properties":
if(!isProperties(propertyValue)) {
return false;
}
break;
case "patternProperties":
if(!isPatternProperties(propertyValue)) {
return false;
}
break;
case "dependentSchemas":
if(!isDependentSchemas(propertyValue)) {
return false;
}
break;
case "propertyNames":
if(!isApplicatorPropertyNames(propertyValue)) {
return false;
}
break;
case "if":
if(!isIf(propertyValue)) {
return false;
}
break;
case "then":
if(!isThen(propertyValue)) {
return false;
}
break;
case "else":
if(!isElse(propertyValue)) {
return false;
}
break;
case "allOf":
if(!isAllOf(propertyValue)) {
return false;
}
break;
case "anyOf":
if(!isAnyOf(propertyValue)) {
return false;
}
break;
case "oneOf":
if(!isOneOf(propertyValue)) {
return false;
}
break;
case "not":
if(!isNot(propertyValue)) {
return false;
}
break;
case "unevaluatedItems":
if(!isUnevaluatedItems(propertyValue)) {
return false;
}
break;
case "unevaluatedProperties":
if(!isUnevaluatedProperties(propertyValue)) {
return false;
}
break;
case "type":
if(!isType(propertyValue)) {
return false;
}
break;
case "const":
if(!isConst(propertyValue)) {
return false;
}
break;
case "enum":
if(!isEnum(propertyValue)) {
return false;
}
break;
case "multipleOf":
if(!isMultipleOf(propertyValue)) {
return false;
}
break;
case "maximum":
if(!isMaximum(propertyValue)) {
return false;
}
break;
case "exclusiveMaximum":
if(!isExclusiveMaximum(propertyValue)) {
return false;
}
break;
case "minimum":
if(!isMinimum(propertyValue)) {
return false;
}
break;
case "exclusiveMinimum":
if(!isExclusiveMinimum(propertyValue)) {
return false;
}
break;
case "maxLength":
if(!isMaxLength(propertyValue)) {
return false;
}
break;
case "minLength":
if(!isMinLength(propertyValue)) {
return false;
}
break;
case "pattern":
if(!isPattern(propertyValue)) {
return false;
}
break;
case "maxItems":
if(!isMaxItems(propertyValue)) {
return false;
}
break;
case "minItems":
if(!isMinItems(propertyValue)) {
return false;
}
break;
case "uniqueItems":
if(!isUniqueItems(propertyValue)) {
return false;
}
break;
case "maxContains":
if(!isMaxContains(propertyValue)) {
return false;
}
break;
case "minContains":
if(!isMinContains(propertyValue)) {
return false;
}
break;
case "maxProperties":
if(!isMaxProperties(propertyValue)) {
return false;
}
break;
case "minProperties":
if(!isMinProperties(propertyValue)) {
return false;
}
break;
case "required":
if(!isRequired(propertyValue)) {
return false;
}
break;
case "dependentRequired":
if(!isDependentRequired(propertyValue)) {
return false;
}
break;
case "title":
if(!isTitle(propertyValue)) {
return false;
}
break;
case "description":
if(!isDescription(propertyValue)) {
return false;
}
break;
case "default":
if(!isDefault(propertyValue)) {
return false;
}
break;
case "deprecated":
if(!isDeprecated(propertyValue)) {
return false;
}
break;
case "readOnly":
if(!isReadOnly(propertyValue)) {
return false;
}
break;
case "writeOnly":
if(!isWriteOnly(propertyValue)) {
return false;
}
break;
case "examples":
if(!isExamples(propertyValue)) {
return false;
}
break;
case "format":
if(!isFormat(propertyValue)) {
return false;
}
break;
case "contentEncoding":
if(!isContentEncoding(propertyValue)) {
return false;
}
break;
case "contentMediaType":
if(!isContentMediaType(propertyValue)) {
return false;
}
break;
case "contentSchema":
if(!isContentSchema(propertyValue)) {
return false;
}
break;
case "definitions":
if(!isDefinitions(propertyValue)) {
return false;
}
break;
case "dependencies":
if(!isDependencies(propertyValue)) {
return false;
}
break;
case "$recursiveAnchor":
if(!isRecursiveAnchor(propertyValue)) {
return false;
}
break;
case "$recursiveRef":
if(!isRecursiveRef(propertyValue)) {
return false;
}
break;
}
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "1")
) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "2")
) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/dependencies/additionalProperties/anyOf/0}
*/
export function isDependencies0(value: unknown, pathPart?: string): value is types.Dependencies0 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/dependencies/additionalProperties/anyOf/1}
*/
export function isDependencies1(value: unknown, pathPart?: string): value is types.Dependencies1 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isStringArray(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/$defs/anchorString}
*/
export function isAnchorString(value: unknown, pathPart?: string): value is types.AnchorString {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/$defs/uriReferenceString}
*/
export function isUriReferenceString(value: unknown, pathPart?: string): value is types.UriReferenceString {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @summary Core vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/core}
*/
export function isCore(value: unknown, pathPart?: string): value is types.Core {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "$id":
if(!isId(propertyValue)) {
return false;
}
break;
case "$schema":
if(!isCoreSchema(propertyValue)) {
return false;
}
break;
case "$ref":
if(!isRef(propertyValue)) {
return false;
}
break;
case "$anchor":
if(!isAnchor(propertyValue)) {
return false;
}
break;
case "$dynamicRef":
if(!isDynamicRef(propertyValue)) {
return false;
}
break;
case "$dynamicAnchor":
if(!isDynamicAnchor(propertyValue)) {
return false;
}
break;
case "$vocabulary":
if(!isVocabulary(propertyValue)) {
return false;
}
break;
case "$comment":
if(!isComment(propertyValue)) {
return false;
}
break;
case "$defs":
if(!isDefs(propertyValue)) {
return false;
}
break;
}
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "0")
) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "1")
) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/$defs/uriString}
*/
export function isUriString(value: unknown, pathPart?: string): value is types.UriString {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$id}
*/
export function isId(value: unknown, pathPart?: string): value is types.Id {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$schema}
*/
export function isCoreSchema(value: unknown, pathPart?: string): value is types.CoreSchema {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isUriString(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$ref}
*/
export function isRef(value: unknown, pathPart?: string): value is types.Ref {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isUriReferenceString(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$anchor}
*/
export function isAnchor(value: unknown, pathPart?: string): value is types.Anchor {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isAnchorString(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$dynamicRef}
*/
export function isDynamicRef(value: unknown, pathPart?: string): value is types.DynamicRef {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isUriReferenceString(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$dynamicAnchor}
*/
export function isDynamicAnchor(value: unknown, pathPart?: string): value is types.DynamicAnchor {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isAnchorString(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary}
*/
export function isVocabulary(value: unknown, pathPart?: string): value is types.Vocabulary {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!isVocabularyPropertyNames(propertyName)) {
return false;
}
if(!isVocabularyAdditionalProperties(propertyValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$comment}
*/
export function isComment(value: unknown, pathPart?: string): value is types.Comment {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$defs}
*/
export function isDefs(value: unknown, pathPart?: string): value is types.Defs {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(propertyName, undefined)
) {
return false;
}
if(!isDefsAdditionalProperties(propertyValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary/additionalProperties}
*/
export function isVocabularyAdditionalProperties(value: unknown, pathPart?: string): value is types.VocabularyAdditionalProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary/propertyNames}
*/
export function isVocabularyPropertyNames(value: unknown, pathPart?: string): value is types.VocabularyPropertyNames {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isUriString(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$defs/additionalProperties}
*/
export function isDefsAdditionalProperties(value: unknown, pathPart?: string): value is types.DefsAdditionalProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @summary Applicator vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator}
*/
export function isApplicator(value: unknown, pathPart?: string): value is types.Applicator {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "prefixItems":
if(!isPrefixItems(propertyValue)) {
return false;
}
break;
case "items":
if(!isApplicatorItems(propertyValue)) {
return false;
}
break;
case "contains":
if(!isContains(propertyValue)) {
return false;
}
break;
case "additionalProperties":
if(!isApplicatorAdditionalProperties(propertyValue)) {
return false;
}
break;
case "properties":
if(!isProperties(propertyValue)) {
return false;
}
break;
case "patternProperties":
if(!isPatternProperties(propertyValue)) {
return false;
}
break;
case "dependentSchemas":
if(!isDependentSchemas(propertyValue)) {
return false;
}
break;
case "propertyNames":
if(!isApplicatorPropertyNames(propertyValue)) {
return false;
}
break;
case "if":
if(!isIf(propertyValue)) {
return false;
}
break;
case "then":
if(!isThen(propertyValue)) {
return false;
}
break;
case "else":
if(!isElse(propertyValue)) {
return false;
}
break;
case "allOf":
if(!isAllOf(propertyValue)) {
return false;
}
break;
case "anyOf":
if(!isAnyOf(propertyValue)) {
return false;
}
break;
case "oneOf":
if(!isOneOf(propertyValue)) {
return false;
}
break;
case "not":
if(!isNot(propertyValue)) {
return false;
}
break;
}
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "0")
) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "1")
) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/$defs/schemaArray}
*/
export function isSchemaArray(value: unknown, pathPart?: string): value is types.SchemaArray {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(!Array.isArray(value)) {
return false;
}
if(value.length < 1) {
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isSchemaArrayItems(elementValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/prefixItems}
*/
export function isPrefixItems(value: unknown, pathPart?: string): value is types.PrefixItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchemaArray(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/items}
*/
export function isApplicatorItems(value: unknown, pathPart?: string): value is types.ApplicatorItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/contains}
*/
export function isContains(value: unknown, pathPart?: string): value is types.Contains {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/additionalProperties}
*/
export function isApplicatorAdditionalProperties(value: unknown, pathPart?: string): value is types.ApplicatorAdditionalProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/properties}
*/
export function isProperties(value: unknown, pathPart?: string): value is types.Properties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(propertyName, undefined)
) {
return false;
}
if(!isPropertiesAdditionalProperties(propertyValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties}
*/
export function isPatternProperties(value: unknown, pathPart?: string): value is types.PatternProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!isPatternPropertiesPropertyNames(propertyName)) {
return false;
}
if(!isPatternPropertiesAdditionalProperties(propertyValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/dependentSchemas}
*/
export function isDependentSchemas(value: unknown, pathPart?: string): value is types.DependentSchemas {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(propertyName, undefined)
) {
return false;
}
if(!isDependentSchemasAdditionalProperties(propertyValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/propertyNames}
*/
export function isApplicatorPropertyNames(value: unknown, pathPart?: string): value is types.ApplicatorPropertyNames {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/if}
*/
export function isIf(value: unknown, pathPart?: string): value is types.If {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/then}
*/
export function isThen(value: unknown, pathPart?: string): value is types.Then {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/else}
*/
export function isElse(value: unknown, pathPart?: string): value is types.Else {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/allOf}
*/
export function isAllOf(value: unknown, pathPart?: string): value is types.AllOf {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchemaArray(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/anyOf}
*/
export function isAnyOf(value: unknown, pathPart?: string): value is types.AnyOf {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchemaArray(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/oneOf}
*/
export function isOneOf(value: unknown, pathPart?: string): value is types.OneOf {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchemaArray(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/not}
*/
export function isNot(value: unknown, pathPart?: string): value is types.Not {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/$defs/schemaArray/items}
*/
export function isSchemaArrayItems(value: unknown, pathPart?: string): value is types.SchemaArrayItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/properties/additionalProperties}
*/
export function isPropertiesAdditionalProperties(value: unknown, pathPart?: string): value is types.PropertiesAdditionalProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties/additionalProperties}
*/
export function isPatternPropertiesAdditionalProperties(value: unknown, pathPart?: string): value is types.PatternPropertiesAdditionalProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties/propertyNames}
*/
export function isPatternPropertiesPropertyNames(value: unknown, pathPart?: string): value is types.PatternPropertiesPropertyNames {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/dependentSchemas/additionalProperties}
*/
export function isDependentSchemasAdditionalProperties(value: unknown, pathPart?: string): value is types.DependentSchemasAdditionalProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @summary Unevaluated applicator vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/unevaluated}
*/
export function isUnevaluated(value: unknown, pathPart?: string): value is types.Unevaluated {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "unevaluatedItems":
if(!isUnevaluatedItems(propertyValue)) {
return false;
}
break;
case "unevaluatedProperties":
if(!isUnevaluatedProperties(propertyValue)) {
return false;
}
break;
}
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "0")
) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "1")
) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/unevaluated#/properties/unevaluatedItems}
*/
export function isUnevaluatedItems(value: unknown, pathPart?: string): value is types.UnevaluatedItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/unevaluated#/properties/unevaluatedProperties}
*/
export function isUnevaluatedProperties(value: unknown, pathPart?: string): value is types.UnevaluatedProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @summary Validation vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/validation}
*/
export function isValidation(value: unknown, pathPart?: string): value is types.Validation {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!isType(propertyValue)) {
return false;
}
break;
case "const":
if(!isConst(propertyValue)) {
return false;
}
break;
case "enum":
if(!isEnum(propertyValue)) {
return false;
}
break;
case "multipleOf":
if(!isMultipleOf(propertyValue)) {
return false;
}
break;
case "maximum":
if(!isMaximum(propertyValue)) {
return false;
}
break;
case "exclusiveMaximum":
if(!isExclusiveMaximum(propertyValue)) {
return false;
}
break;
case "minimum":
if(!isMinimum(propertyValue)) {
return false;
}
break;
case "exclusiveMinimum":
if(!isExclusiveMinimum(propertyValue)) {
return false;
}
break;
case "maxLength":
if(!isMaxLength(propertyValue)) {
return false;
}
break;
case "minLength":
if(!isMinLength(propertyValue)) {
return false;
}
break;
case "pattern":
if(!isPattern(propertyValue)) {
return false;
}
break;
case "maxItems":
if(!isMaxItems(propertyValue)) {
return false;
}
break;
case "minItems":
if(!isMinItems(propertyValue)) {
return false;
}
break;
case "uniqueItems":
if(!isUniqueItems(propertyValue)) {
return false;
}
break;
case "maxContains":
if(!isMaxContains(propertyValue)) {
return false;
}
break;
case "minContains":
if(!isMinContains(propertyValue)) {
return false;
}
break;
case "maxProperties":
if(!isMaxProperties(propertyValue)) {
return false;
}
break;
case "minProperties":
if(!isMinProperties(propertyValue)) {
return false;
}
break;
case "required":
if(!isRequired(propertyValue)) {
return false;
}
break;
case "dependentRequired":
if(!isDependentRequired(propertyValue)) {
return false;
}
break;
}
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "0")
) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "1")
) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/nonNegativeInteger}
*/
export function isNonNegativeInteger(value: unknown, pathPart?: string): value is types.NonNegativeInteger {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "number" ||
isNaN(value) ||
value % 1 !== 0
) {
return false;
}
if(
value < 0
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/nonNegativeIntegerDefault0}
*/
export function isNonNegativeIntegerDefault0(value: unknown, pathPart?: string): value is types.NonNegativeIntegerDefault0 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isNonNegativeInteger(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/simpleTypes}
*/
export function isSimpleTypes(value: unknown, pathPart?: string): value is types.SimpleTypes {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
if(value !== "array" &&
value !== "boolean" &&
value !== "integer" &&
value !== "null" &&
value !== "number" &&
value !== "object" &&
value !== "string") {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray}
*/
export function isStringArray(value: unknown, pathPart?: string): value is types.StringArray {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(!Array.isArray(value)) {
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isStringArrayItems(elementValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/type}
*/
export function isType(value: unknown, pathPart?: string): value is types.Type {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(isType0(value)) {
count++;
if(count > 1) {
return false;
}
}
if(isType1(value)) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/const}
*/
export function isConst(value: unknown, pathPart?: string): value is types.Const {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
// any
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/enum}
*/
export function isEnum(value: unknown, pathPart?: string): value is types.Enum {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(!Array.isArray(value)) {
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isEnumItems(elementValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/multipleOf}
*/
export function isMultipleOf(value: unknown, pathPart?: string): value is types.MultipleOf {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "number" ||
isNaN(value)
) {
return false;
}
if(
value <= 0
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maximum}
*/
export function isMaximum(value: unknown, pathPart?: string): value is types.Maximum {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "number" ||
isNaN(value)
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/exclusiveMaximum}
*/
export function isExclusiveMaximum(value: unknown, pathPart?: string): value is types.ExclusiveMaximum {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "number" ||
isNaN(value)
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minimum}
*/
export function isMinimum(value: unknown, pathPart?: string): value is types.Minimum {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "number" ||
isNaN(value)
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/exclusiveMinimum}
*/
export function isExclusiveMinimum(value: unknown, pathPart?: string): value is types.ExclusiveMinimum {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "number" ||
isNaN(value)
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maxLength}
*/
export function isMaxLength(value: unknown, pathPart?: string): value is types.MaxLength {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isNonNegativeInteger(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minLength}
*/
export function isMinLength(value: unknown, pathPart?: string): value is types.MinLength {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isNonNegativeIntegerDefault0(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/pattern}
*/
export function isPattern(value: unknown, pathPart?: string): value is types.Pattern {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maxItems}
*/
export function isMaxItems(value: unknown, pathPart?: string): value is types.MaxItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isNonNegativeInteger(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minItems}
*/
export function isMinItems(value: unknown, pathPart?: string): value is types.MinItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isNonNegativeIntegerDefault0(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/uniqueItems}
*/
export function isUniqueItems(value: unknown, pathPart?: string): value is types.UniqueItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maxContains}
*/
export function isMaxContains(value: unknown, pathPart?: string): value is types.MaxContains {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isNonNegativeInteger(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minContains}
*/
export function isMinContains(value: unknown, pathPart?: string): value is types.MinContains {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isNonNegativeInteger(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maxProperties}
*/
export function isMaxProperties(value: unknown, pathPart?: string): value is types.MaxProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isNonNegativeInteger(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minProperties}
*/
export function isMinProperties(value: unknown, pathPart?: string): value is types.MinProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isNonNegativeIntegerDefault0(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/required}
*/
export function isRequired(value: unknown, pathPart?: string): value is types.Required {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isStringArray(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/dependentRequired}
*/
export function isDependentRequired(value: unknown, pathPart?: string): value is types.DependentRequired {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(propertyName, undefined)
) {
return false;
}
if(!isDependentRequiredAdditionalProperties(propertyValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray/items}
*/
export function isStringArrayItems(value: unknown, pathPart?: string): value is types.StringArrayItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/type/anyOf/0}
*/
export function isType0(value: unknown, pathPart?: string): value is types.Type0 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSimpleTypes(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/type/anyOf/1}
*/
export function isType1(value: unknown, pathPart?: string): value is types.Type1 {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(!Array.isArray(value)) {
return false;
}
if(value.length < 1) {
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isTypeItems(elementValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/enum/items}
*/
export function isEnumItems(value: unknown, pathPart?: string): value is types.EnumItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
// any
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/dependentRequired/additionalProperties}
*/
export function isDependentRequiredAdditionalProperties(value: unknown, pathPart?: string): value is types.DependentRequiredAdditionalProperties {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isStringArray(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/type/anyOf/1/items}
*/
export function isTypeItems(value: unknown, pathPart?: string): value is types.TypeItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSimpleTypes(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @summary Meta-data vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data}
*/
export function isMetaData(value: unknown, pathPart?: string): value is types.MetaData {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "title":
if(!isTitle(propertyValue)) {
return false;
}
break;
case "description":
if(!isDescription(propertyValue)) {
return false;
}
break;
case "default":
if(!isDefault(propertyValue)) {
return false;
}
break;
case "deprecated":
if(!isDeprecated(propertyValue)) {
return false;
}
break;
case "readOnly":
if(!isReadOnly(propertyValue)) {
return false;
}
break;
case "writeOnly":
if(!isWriteOnly(propertyValue)) {
return false;
}
break;
case "examples":
if(!isExamples(propertyValue)) {
return false;
}
break;
}
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "0")
) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "1")
) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/title}
*/
export function isTitle(value: unknown, pathPart?: string): value is types.Title {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/description}
*/
export function isDescription(value: unknown, pathPart?: string): value is types.Description {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/default}
*/
export function isDefault(value: unknown, pathPart?: string): value is types.Default {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
// any
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/deprecated}
*/
export function isDeprecated(value: unknown, pathPart?: string): value is types.Deprecated {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/readOnly}
*/
export function isReadOnly(value: unknown, pathPart?: string): value is types.ReadOnly {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/writeOnly}
*/
export function isWriteOnly(value: unknown, pathPart?: string): value is types.WriteOnly {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/examples}
*/
export function isExamples(value: unknown, pathPart?: string): value is types.Examples {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(!Array.isArray(value)) {
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isExamplesItems(elementValue)) {
return false;
}
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/examples/items}
*/
export function isExamplesItems(value: unknown, pathPart?: string): value is types.ExamplesItems {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
// any
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @summary Format vocabulary meta-schema for annotation results
* @see {@link https://json-schema.org/draft/2020-12/meta/format-annotation}
*/
export function isFormatAnnotation(value: unknown, pathPart?: string): value is types.FormatAnnotation {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "format":
if(!isFormat(propertyValue)) {
return false;
}
break;
}
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "0")
) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "1")
) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/format-annotation#/properties/format}
*/
export function isFormat(value: unknown, pathPart?: string): value is types.Format {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @summary Content vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/content}
*/
export function isContent(value: unknown, pathPart?: string): value is types.Content {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
let count = 0;
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
value === null ||
typeof value !== "object" ||
Array.isArray(value)
) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "contentEncoding":
if(!isContentEncoding(propertyValue)) {
return false;
}
break;
case "contentMediaType":
if(!isContentMediaType(propertyValue)) {
return false;
}
break;
case "contentSchema":
if(!isContentSchema(propertyValue)) {
return false;
}
break;
}
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "0")
) {
count++;
if(count > 1) {
return false;
}
}
if(
((value: unknown, pathPart?: string) => {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(typeof value !== "boolean") {
return false;
}
return true;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
})(value, "1")
) {
count++;
if(count > 1) {
return false;
}
}
return count === 1;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/content#/properties/contentEncoding}
*/
export function isContentEncoding(value: unknown, pathPart?: string): value is types.ContentEncoding {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/content#/properties/contentMediaType}
*/
export function isContentMediaType(value: unknown, pathPart?: string): value is types.ContentMediaType {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
if(
typeof value !== "string"
) {
return false;
}
return true;
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/content#/properties/contentSchema}
*/
export function isContentSchema(value: unknown, pathPart?: string): value is types.ContentSchema {
try {
if(pathPart != null) {
currentPath.push(pathPart);
}
return (isSchema(value));
;
}
finally {
if(pathPart != null) {
currentPath.pop();
}
}
}
