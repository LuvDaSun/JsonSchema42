// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.9.6                          -- www.JsonSchema42.org
import * as types from "./types.js";
// https://json-schema.org/draft/2020-12/schema
export function mockSchema(): types.Schema {
return (
(() => {
switch (
(
nextSeed() % 14
) as 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
) {
case 0:
return ((
{
"$id": Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": Boolean(nextSeed() % 2) ? mockDefs() : undefined,
"prefixItems": Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": Boolean(nextSeed() % 2) ? mockNot() : undefined,
"unevaluatedItems": Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
"type": Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
"title": Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"format": Boolean(nextSeed() % 2) ? mockFormat() : undefined,
"contentEncoding": Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
"definitions": Boolean(nextSeed() % 2) ? mockDefinitions() : undefined,
"dependencies": Boolean(nextSeed() % 2) ? mockDependencies() : undefined,
"$recursiveAnchor": Boolean(nextSeed() % 2) ? mockRecursiveAnchor() : undefined,
"$recursiveRef": Boolean(nextSeed() % 2) ? mockRecursiveRef() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
case 2:
return ((
{
"$id": Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": Boolean(nextSeed() % 2) ? mockDefs() : undefined,
"prefixItems": Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": Boolean(nextSeed() % 2) ? mockNot() : undefined,
"unevaluatedItems": Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
"type": Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
"title": Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"format": Boolean(nextSeed() % 2) ? mockFormat() : undefined,
"contentEncoding": Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
"definitions": Boolean(nextSeed() % 2) ? mockDefinitions() : undefined,
"dependencies": Boolean(nextSeed() % 2) ? mockDependencies() : undefined,
"$recursiveAnchor": Boolean(nextSeed() % 2) ? mockRecursiveAnchor() : undefined,
"$recursiveRef": Boolean(nextSeed() % 2) ? mockRecursiveRef() : undefined,
}
));
case 3:
return ((Boolean(nextSeed() % 2)));
case 4:
return ((
{
"$id": Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": Boolean(nextSeed() % 2) ? mockDefs() : undefined,
"prefixItems": Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": Boolean(nextSeed() % 2) ? mockNot() : undefined,
"unevaluatedItems": Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
"type": Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
"title": Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"format": Boolean(nextSeed() % 2) ? mockFormat() : undefined,
"contentEncoding": Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
"definitions": Boolean(nextSeed() % 2) ? mockDefinitions() : undefined,
"dependencies": Boolean(nextSeed() % 2) ? mockDependencies() : undefined,
"$recursiveAnchor": Boolean(nextSeed() % 2) ? mockRecursiveAnchor() : undefined,
"$recursiveRef": Boolean(nextSeed() % 2) ? mockRecursiveRef() : undefined,
}
));
case 5:
return ((Boolean(nextSeed() % 2)));
case 6:
return ((
{
"$id": Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": Boolean(nextSeed() % 2) ? mockDefs() : undefined,
"prefixItems": Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": Boolean(nextSeed() % 2) ? mockNot() : undefined,
"unevaluatedItems": Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
"type": Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
"title": Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"format": Boolean(nextSeed() % 2) ? mockFormat() : undefined,
"contentEncoding": Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
"definitions": Boolean(nextSeed() % 2) ? mockDefinitions() : undefined,
"dependencies": Boolean(nextSeed() % 2) ? mockDependencies() : undefined,
"$recursiveAnchor": Boolean(nextSeed() % 2) ? mockRecursiveAnchor() : undefined,
"$recursiveRef": Boolean(nextSeed() % 2) ? mockRecursiveRef() : undefined,
}
));
case 7:
return ((Boolean(nextSeed() % 2)));
case 8:
return ((
{
"$id": Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": Boolean(nextSeed() % 2) ? mockDefs() : undefined,
"prefixItems": Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": Boolean(nextSeed() % 2) ? mockNot() : undefined,
"unevaluatedItems": Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
"type": Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
"title": Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"format": Boolean(nextSeed() % 2) ? mockFormat() : undefined,
"contentEncoding": Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
"definitions": Boolean(nextSeed() % 2) ? mockDefinitions() : undefined,
"dependencies": Boolean(nextSeed() % 2) ? mockDependencies() : undefined,
"$recursiveAnchor": Boolean(nextSeed() % 2) ? mockRecursiveAnchor() : undefined,
"$recursiveRef": Boolean(nextSeed() % 2) ? mockRecursiveRef() : undefined,
}
));
case 9:
return ((Boolean(nextSeed() % 2)));
case 10:
return ((
{
"$id": Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": Boolean(nextSeed() % 2) ? mockDefs() : undefined,
"prefixItems": Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": Boolean(nextSeed() % 2) ? mockNot() : undefined,
"unevaluatedItems": Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
"type": Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
"title": Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"format": Boolean(nextSeed() % 2) ? mockFormat() : undefined,
"contentEncoding": Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
"definitions": Boolean(nextSeed() % 2) ? mockDefinitions() : undefined,
"dependencies": Boolean(nextSeed() % 2) ? mockDependencies() : undefined,
"$recursiveAnchor": Boolean(nextSeed() % 2) ? mockRecursiveAnchor() : undefined,
"$recursiveRef": Boolean(nextSeed() % 2) ? mockRecursiveRef() : undefined,
}
));
case 11:
return ((Boolean(nextSeed() % 2)));
case 12:
return ((
{
"$id": Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": Boolean(nextSeed() % 2) ? mockDefs() : undefined,
"prefixItems": Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": Boolean(nextSeed() % 2) ? mockNot() : undefined,
"unevaluatedItems": Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
"type": Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
"title": Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"format": Boolean(nextSeed() % 2) ? mockFormat() : undefined,
"contentEncoding": Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
"definitions": Boolean(nextSeed() % 2) ? mockDefinitions() : undefined,
"dependencies": Boolean(nextSeed() % 2) ? mockDependencies() : undefined,
"$recursiveAnchor": Boolean(nextSeed() % 2) ? mockRecursiveAnchor() : undefined,
"$recursiveRef": Boolean(nextSeed() % 2) ? mockRecursiveRef() : undefined,
}
));
case 13:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
// https://json-schema.org/draft/2020-12/schema#/properties/definitions
export function mockDefinitions(): types.Definitions {
return (
{
[(randomString(10))]: mockDefinitionsAdditionalProperties(),
[(randomString(10))]: mockDefinitionsAdditionalProperties(),
[(randomString(10))]: mockDefinitionsAdditionalProperties(),
[(randomString(10))]: mockDefinitionsAdditionalProperties(),
[(randomString(10))]: mockDefinitionsAdditionalProperties(),
}
);
}
// https://json-schema.org/draft/2020-12/schema#/properties/dependencies
export function mockDependencies(): types.Dependencies {
return (
{
[(randomString(10))]: mockDependenciesAdditionalProperties(),
[(randomString(10))]: mockDependenciesAdditionalProperties(),
[(randomString(10))]: mockDependenciesAdditionalProperties(),
[(randomString(10))]: mockDependenciesAdditionalProperties(),
[(randomString(10))]: mockDependenciesAdditionalProperties(),
}
);
}
// https://json-schema.org/draft/2020-12/schema#/properties/$recursiveAnchor
export function mockRecursiveAnchor(): types.RecursiveAnchor {
return (mockAnchorString());
}
// https://json-schema.org/draft/2020-12/schema#/properties/$recursiveRef
export function mockRecursiveRef(): types.RecursiveRef {
return (mockUriReferenceString());
}
// https://json-schema.org/draft/2020-12/schema#/allOf/0
export function mockAllOf0(): types.AllOf0 {
return (mockCore());
}
// https://json-schema.org/draft/2020-12/schema#/allOf/1
export function mockAllOf1(): types.AllOf1 {
return (mockApplicator());
}
// https://json-schema.org/draft/2020-12/schema#/allOf/2
export function mockAllOf2(): types.AllOf2 {
return (mockUnevaluated());
}
// https://json-schema.org/draft/2020-12/schema#/allOf/3
export function mockAllOf3(): types.AllOf3 {
return (mockValidation());
}
// https://json-schema.org/draft/2020-12/schema#/allOf/4
export function mockAllOf4(): types.AllOf4 {
return (mockMetaData());
}
// https://json-schema.org/draft/2020-12/schema#/allOf/5
export function mockAllOf5(): types.AllOf5 {
return (mockFormatAnnotation());
}
// https://json-schema.org/draft/2020-12/schema#/allOf/6
export function mockAllOf6(): types.AllOf6 {
return (mockContent());
}
// https://json-schema.org/draft/2020-12/schema#/properties/definitions/additionalProperties
export function mockDefinitionsAdditionalProperties(): types.DefinitionsAdditionalProperties {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/schema#/properties/dependencies/additionalProperties
export function mockDependenciesAdditionalProperties(): types.DependenciesAdditionalProperties {
return (
// unknown
{}
);
}
// https://json-schema.org/draft/2020-12/schema#/properties/dependencies/additionalProperties/anyOf/0
export function mockDependencies0(): types.Dependencies0 {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/schema#/properties/dependencies/additionalProperties/anyOf/1
export function mockDependencies1(): types.Dependencies1 {
return (mockStringArray());
}
// https://json-schema.org/draft/2020-12/meta/core#/$defs/anchorString
export function mockAnchorString(): types.AnchorString {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/core#/$defs/uriReferenceString
export function mockUriReferenceString(): types.UriReferenceString {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/core
export function mockCore(): types.Core {
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"$id": Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": Boolean(nextSeed() % 2) ? mockDefs() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
// https://json-schema.org/draft/2020-12/meta/core#/$defs/uriString
export function mockUriString(): types.UriString {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$id
export function mockId(): types.Id {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$schema
export function mockCoreSchema(): types.CoreSchema {
return (mockUriString());
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$ref
export function mockRef(): types.Ref {
return (mockUriReferenceString());
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$anchor
export function mockAnchor(): types.Anchor {
return (mockAnchorString());
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$dynamicRef
export function mockDynamicRef(): types.DynamicRef {
return (mockUriReferenceString());
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$dynamicAnchor
export function mockDynamicAnchor(): types.DynamicAnchor {
return (mockAnchorString());
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary
export function mockVocabulary(): types.Vocabulary {
return (
{
[(randomString(10))]: mockVocabularyAdditionalProperties(),
[(randomString(10))]: mockVocabularyAdditionalProperties(),
[(randomString(10))]: mockVocabularyAdditionalProperties(),
[(randomString(10))]: mockVocabularyAdditionalProperties(),
[(randomString(10))]: mockVocabularyAdditionalProperties(),
}
);
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$comment
export function mockComment(): types.Comment {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$defs
export function mockDefs(): types.Defs {
return (
{
[(randomString(10))]: mockDefsAdditionalProperties(),
[(randomString(10))]: mockDefsAdditionalProperties(),
[(randomString(10))]: mockDefsAdditionalProperties(),
[(randomString(10))]: mockDefsAdditionalProperties(),
[(randomString(10))]: mockDefsAdditionalProperties(),
}
);
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary/additionalProperties
export function mockVocabularyAdditionalProperties(): types.VocabularyAdditionalProperties {
return (Boolean(nextSeed() % 2));
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary/propertyNames
export function mockVocabularyPropertyNames(): types.VocabularyPropertyNames {
return (mockUriString());
}
// https://json-schema.org/draft/2020-12/meta/core#/properties/$defs/additionalProperties
export function mockDefsAdditionalProperties(): types.DefsAdditionalProperties {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator
export function mockApplicator(): types.Applicator {
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"prefixItems": Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": Boolean(nextSeed() % 2) ? mockNot() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
// https://json-schema.org/draft/2020-12/meta/applicator#/$defs/schemaArray
export function mockSchemaArray(): types.SchemaArray {
return (
[
mockSchemaArrayItems(),
mockSchemaArrayItems(),
mockSchemaArrayItems(),
mockSchemaArrayItems(),
mockSchemaArrayItems(),
]
);
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/prefixItems
export function mockPrefixItems(): types.PrefixItems {
return (mockSchemaArray());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/items
export function mockApplicatorItems(): types.ApplicatorItems {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/contains
export function mockContains(): types.Contains {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/additionalProperties
export function mockApplicatorAdditionalProperties(): types.ApplicatorAdditionalProperties {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/properties
export function mockProperties(): types.Properties {
return (
{
[(randomString(10))]: mockPropertiesAdditionalProperties(),
[(randomString(10))]: mockPropertiesAdditionalProperties(),
[(randomString(10))]: mockPropertiesAdditionalProperties(),
[(randomString(10))]: mockPropertiesAdditionalProperties(),
[(randomString(10))]: mockPropertiesAdditionalProperties(),
}
);
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties
export function mockPatternProperties(): types.PatternProperties {
return (
{
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
}
);
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/dependentSchemas
export function mockDependentSchemas(): types.DependentSchemas {
return (
{
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
}
);
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/propertyNames
export function mockApplicatorPropertyNames(): types.ApplicatorPropertyNames {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/if
export function mockIf(): types.If {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/then
export function mockThen(): types.Then {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/else
export function mockElse(): types.Else {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/allOf
export function mockAllOf(): types.AllOf {
return (mockSchemaArray());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/anyOf
export function mockAnyOf(): types.AnyOf {
return (mockSchemaArray());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/oneOf
export function mockOneOf(): types.OneOf {
return (mockSchemaArray());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/not
export function mockNot(): types.Not {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/$defs/schemaArray/items
export function mockSchemaArrayItems(): types.SchemaArrayItems {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/properties/additionalProperties
export function mockPropertiesAdditionalProperties(): types.PropertiesAdditionalProperties {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties/additionalProperties
export function mockPatternPropertiesAdditionalProperties(): types.PatternPropertiesAdditionalProperties {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties/propertyNames
export function mockPatternPropertiesPropertyNames(): types.PatternPropertiesPropertyNames {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/applicator#/properties/dependentSchemas/additionalProperties
export function mockDependentSchemasAdditionalProperties(): types.DependentSchemasAdditionalProperties {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/unevaluated
export function mockUnevaluated(): types.Unevaluated {
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"unevaluatedItems": Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
// https://json-schema.org/draft/2020-12/meta/unevaluated#/properties/unevaluatedItems
export function mockUnevaluatedItems(): types.UnevaluatedItems {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/unevaluated#/properties/unevaluatedProperties
export function mockUnevaluatedProperties(): types.UnevaluatedProperties {
return (mockSchema());
}
// https://json-schema.org/draft/2020-12/meta/validation
export function mockValidation(): types.Validation {
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"type": Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
// https://json-schema.org/draft/2020-12/meta/validation#/$defs/nonNegativeInteger
export function mockNonNegativeInteger(): types.NonNegativeInteger {
return (Number(nextSeed() % 1000));
}
// https://json-schema.org/draft/2020-12/meta/validation#/$defs/nonNegativeIntegerDefault0
export function mockNonNegativeIntegerDefault0(): types.NonNegativeIntegerDefault0 {
return (mockNonNegativeInteger());
}
// https://json-schema.org/draft/2020-12/meta/validation#/$defs/simpleTypes
export function mockSimpleTypes(): types.SimpleTypes {
return ((["array", "boolean", "integer", "null", "number", "object", "string"] as const)[nextSeed() % 7]);
}
// https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray
export function mockStringArray(): types.StringArray {
return (
[
mockStringArrayItems(),
mockStringArrayItems(),
mockStringArrayItems(),
mockStringArrayItems(),
mockStringArrayItems(),
]
);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/type
export function mockType(): types.Type {
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return (mockType0());
case 1:
return (mockType1());
}
})()
);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/const
export function mockConst(): types.Const {
return (
// any
{}
);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/enum
export function mockEnum(): types.Enum {
return (
[
mockEnumItems(),
mockEnumItems(),
mockEnumItems(),
mockEnumItems(),
mockEnumItems(),
]
);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/multipleOf
export function mockMultipleOf(): types.MultipleOf {
return (Number(nextSeed() % 1000 * 10) / 10);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/maximum
export function mockMaximum(): types.Maximum {
return (Number(nextSeed() % 1000 * 10) / 10);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/exclusiveMaximum
export function mockExclusiveMaximum(): types.ExclusiveMaximum {
return (Number(nextSeed() % 1000 * 10) / 10);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/minimum
export function mockMinimum(): types.Minimum {
return (Number(nextSeed() % 1000 * 10) / 10);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/exclusiveMinimum
export function mockExclusiveMinimum(): types.ExclusiveMinimum {
return (Number(nextSeed() % 1000 * 10) / 10);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/maxLength
export function mockMaxLength(): types.MaxLength {
return (mockNonNegativeInteger());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/minLength
export function mockMinLength(): types.MinLength {
return (mockNonNegativeIntegerDefault0());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/pattern
export function mockPattern(): types.Pattern {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/maxItems
export function mockMaxItems(): types.MaxItems {
return (mockNonNegativeInteger());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/minItems
export function mockMinItems(): types.MinItems {
return (mockNonNegativeIntegerDefault0());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/uniqueItems
export function mockUniqueItems(): types.UniqueItems {
return (Boolean(nextSeed() % 2));
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/maxContains
export function mockMaxContains(): types.MaxContains {
return (mockNonNegativeInteger());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/minContains
export function mockMinContains(): types.MinContains {
return (mockNonNegativeInteger());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/maxProperties
export function mockMaxProperties(): types.MaxProperties {
return (mockNonNegativeInteger());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/minProperties
export function mockMinProperties(): types.MinProperties {
return (mockNonNegativeIntegerDefault0());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/required
export function mockRequired(): types.Required {
return (mockStringArray());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/dependentRequired
export function mockDependentRequired(): types.DependentRequired {
return (
{
[(randomString(10))]: mockDependentRequiredAdditionalProperties(),
[(randomString(10))]: mockDependentRequiredAdditionalProperties(),
[(randomString(10))]: mockDependentRequiredAdditionalProperties(),
[(randomString(10))]: mockDependentRequiredAdditionalProperties(),
[(randomString(10))]: mockDependentRequiredAdditionalProperties(),
}
);
}
// https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray/items
export function mockStringArrayItems(): types.StringArrayItems {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/type/anyOf/0
export function mockType0(): types.Type0 {
return (mockSimpleTypes());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/type/anyOf/1
export function mockType1(): types.Type1 {
return (
[
mockTypeItems(),
mockTypeItems(),
mockTypeItems(),
mockTypeItems(),
mockTypeItems(),
]
);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/enum/items
export function mockEnumItems(): types.EnumItems {
return (
// any
{}
);
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/dependentRequired/additionalProperties
export function mockDependentRequiredAdditionalProperties(): types.DependentRequiredAdditionalProperties {
return (mockStringArray());
}
// https://json-schema.org/draft/2020-12/meta/validation#/properties/type/anyOf/1/items
export function mockTypeItems(): types.TypeItems {
return (mockSimpleTypes());
}
// https://json-schema.org/draft/2020-12/meta/meta-data
export function mockMetaData(): types.MetaData {
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"title": Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": Boolean(nextSeed() % 2) ? mockExamples() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
// https://json-schema.org/draft/2020-12/meta/meta-data#/properties/title
export function mockTitle(): types.Title {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/meta-data#/properties/description
export function mockDescription(): types.Description {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/meta-data#/properties/default
export function mockDefault(): types.Default {
return (
// any
{}
);
}
// https://json-schema.org/draft/2020-12/meta/meta-data#/properties/deprecated
export function mockDeprecated(): types.Deprecated {
return (Boolean(nextSeed() % 2));
}
// https://json-schema.org/draft/2020-12/meta/meta-data#/properties/readOnly
export function mockReadOnly(): types.ReadOnly {
return (Boolean(nextSeed() % 2));
}
// https://json-schema.org/draft/2020-12/meta/meta-data#/properties/writeOnly
export function mockWriteOnly(): types.WriteOnly {
return (Boolean(nextSeed() % 2));
}
// https://json-schema.org/draft/2020-12/meta/meta-data#/properties/examples
export function mockExamples(): types.Examples {
return (
[
mockExamplesItems(),
mockExamplesItems(),
mockExamplesItems(),
mockExamplesItems(),
mockExamplesItems(),
]
);
}
// https://json-schema.org/draft/2020-12/meta/meta-data#/properties/examples/items
export function mockExamplesItems(): types.ExamplesItems {
return (
// any
{}
);
}
// https://json-schema.org/draft/2020-12/meta/format-annotation
export function mockFormatAnnotation(): types.FormatAnnotation {
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"format": Boolean(nextSeed() % 2) ? mockFormat() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
// https://json-schema.org/draft/2020-12/meta/format-annotation#/properties/format
export function mockFormat(): types.Format {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/content
export function mockContent(): types.Content {
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"contentEncoding": Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
// https://json-schema.org/draft/2020-12/meta/content#/properties/contentEncoding
export function mockContentEncoding(): types.ContentEncoding {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/content#/properties/contentMediaType
export function mockContentMediaType(): types.ContentMediaType {
return (randomString(10));
}
// https://json-schema.org/draft/2020-12/meta/content#/properties/contentSchema
export function mockContentSchema(): types.ContentSchema {
return (mockSchema());
}
let seed = 1;
function nextSeed() {
// https://en.wikipedia.org/wiki/Linear_congruential_generator
// https://statmath.wu.ac.at/software/src/prng-3.0.2/doc/prng.html/Table_LCG.html
const p = Math.pow(2, 31) - 1;
const a = 950706376;
const b = 0;
seed = (a * seed + b) % p;
return seed;
}
const chars = "abcdefghijklmnopqrstuvwxyz";
function randomString(length: number) {
let str = ""
while(str.length < length) {
str += chars[nextSeed() % chars.length];
}
return str;
}
