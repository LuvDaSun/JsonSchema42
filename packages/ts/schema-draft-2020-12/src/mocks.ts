// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.9.6                          -- www.JsonSchema42.org
//
import * as types from "./types.js";
const depthCounters: Record<string, number> = {};
const maximumDepth = 2;
/**
* @summary Core and Validation specifications meta-schema
* @see {@link https://json-schema.org/draft/2020-12/schema}
*/
export function mockSchema(): types.Schema {
depthCounters["0"] ??= 0;
try {
depthCounters["0"]++;
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"$id": (depthCounters["20"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": (depthCounters["19"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": (depthCounters["17"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": (depthCounters["16"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": (depthCounters["17"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": (depthCounters["16"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": (depthCounters["26"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": (depthCounters["27"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": (depthCounters["28"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDefs() : undefined,
"prefixItems": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": (depthCounters["38"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": (depthCounters["39"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": (depthCounters["40"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockNot() : undefined,
"unevaluatedItems": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
"type": (depthCounters["62"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": (depthCounters["63"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": (depthCounters["64"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": (depthCounters["65"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": (depthCounters["66"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": (depthCounters["67"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": (depthCounters["68"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": (depthCounters["69"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": (depthCounters["72"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": (depthCounters["75"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": (depthCounters["61"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": (depthCounters["81"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
"title": (depthCounters["89"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": (depthCounters["90"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": (depthCounters["91"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": (depthCounters["92"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": (depthCounters["93"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": (depthCounters["94"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": (depthCounters["95"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"format": (depthCounters["98"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockFormat() : undefined,
"contentEncoding": (depthCounters["100"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": (depthCounters["101"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
"definitions": (depthCounters["1"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDefinitions() : undefined,
"dependencies": (depthCounters["2"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDependencies() : undefined,
"$recursiveAnchor": (depthCounters["16"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRecursiveAnchor() : undefined,
"$recursiveRef": (depthCounters["17"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRecursiveRef() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
finally {
depthCounters["0"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/definitions}
* @deprecated
*/
export function mockDefinitions(): types.Definitions {
depthCounters["1"] ??= 0;
try {
depthCounters["1"]++;
return (
(depthCounters["0"] ?? 0) < maximumDepth ? {
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefinitionsAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefinitionsAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefinitionsAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefinitionsAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefinitionsAdditionalProperties(),
} : {}
);
}
finally {
depthCounters["1"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/dependencies}
* @deprecated
*/
export function mockDependencies(): types.Dependencies {
depthCounters["2"] ??= 0;
try {
depthCounters["2"]++;
return (
(depthCounters["13"] ?? 0) < maximumDepth ? {
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependenciesAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependenciesAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependenciesAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependenciesAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependenciesAdditionalProperties(),
} : {}
);
}
finally {
depthCounters["2"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/$recursiveAnchor}
* @deprecated
*/
export function mockRecursiveAnchor(): types.RecursiveAnchor {
depthCounters["3"] ??= 0;
try {
depthCounters["3"]++;
return (mockAnchorString());
}
finally {
depthCounters["3"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/$recursiveRef}
* @deprecated
*/
export function mockRecursiveRef(): types.RecursiveRef {
depthCounters["4"] ??= 0;
try {
depthCounters["4"]++;
return (mockUriReferenceString());
}
finally {
depthCounters["4"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/0}
*/
export function mockAllOf0(): types.AllOf0 {
depthCounters["5"] ??= 0;
try {
depthCounters["5"]++;
return (mockCore());
}
finally {
depthCounters["5"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/1}
*/
export function mockAllOf1(): types.AllOf1 {
depthCounters["6"] ??= 0;
try {
depthCounters["6"]++;
return (mockApplicator());
}
finally {
depthCounters["6"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/2}
*/
export function mockAllOf2(): types.AllOf2 {
depthCounters["7"] ??= 0;
try {
depthCounters["7"]++;
return (mockUnevaluated());
}
finally {
depthCounters["7"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/3}
*/
export function mockAllOf3(): types.AllOf3 {
depthCounters["8"] ??= 0;
try {
depthCounters["8"]++;
return (mockValidation());
}
finally {
depthCounters["8"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/4}
*/
export function mockAllOf4(): types.AllOf4 {
depthCounters["9"] ??= 0;
try {
depthCounters["9"]++;
return (mockMetaData());
}
finally {
depthCounters["9"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/5}
*/
export function mockAllOf5(): types.AllOf5 {
depthCounters["10"] ??= 0;
try {
depthCounters["10"]++;
return (mockFormatAnnotation());
}
finally {
depthCounters["10"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/allOf/6}
*/
export function mockAllOf6(): types.AllOf6 {
depthCounters["11"] ??= 0;
try {
depthCounters["11"]++;
return (mockContent());
}
finally {
depthCounters["11"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/definitions/additionalProperties}
*/
export function mockDefinitionsAdditionalProperties(): types.DefinitionsAdditionalProperties {
depthCounters["12"] ??= 0;
try {
depthCounters["12"]++;
return (mockSchema());
}
finally {
depthCounters["12"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/dependencies/additionalProperties}
*/
export function mockDependenciesAdditionalProperties(): types.DependenciesAdditionalProperties {
depthCounters["13"] ??= 0;
try {
depthCounters["13"]++;
return (
(() => {
switch (
(
nextSeed() % 3
) as 0 | 1 | 2
) {
case 0:
return (mockStringArray());
case 1:
return ((
{
"$id": (depthCounters["20"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": (depthCounters["19"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": (depthCounters["17"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": (depthCounters["16"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": (depthCounters["17"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": (depthCounters["16"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": (depthCounters["26"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": (depthCounters["27"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": (depthCounters["28"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDefs() : undefined,
"prefixItems": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": (depthCounters["38"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": (depthCounters["39"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": (depthCounters["40"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockNot() : undefined,
"unevaluatedItems": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
"type": (depthCounters["62"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": (depthCounters["63"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": (depthCounters["64"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": (depthCounters["65"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": (depthCounters["66"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": (depthCounters["67"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": (depthCounters["68"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": (depthCounters["69"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": (depthCounters["72"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": (depthCounters["75"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": (depthCounters["61"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": (depthCounters["81"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
"title": (depthCounters["89"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": (depthCounters["90"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": (depthCounters["91"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": (depthCounters["92"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": (depthCounters["93"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": (depthCounters["94"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": (depthCounters["95"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"format": (depthCounters["98"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockFormat() : undefined,
"contentEncoding": (depthCounters["100"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": (depthCounters["101"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
"definitions": (depthCounters["1"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDefinitions() : undefined,
"dependencies": (depthCounters["2"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDependencies() : undefined,
"$recursiveAnchor": (depthCounters["16"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRecursiveAnchor() : undefined,
"$recursiveRef": (depthCounters["17"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRecursiveRef() : undefined,
}
));
case 2:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
finally {
depthCounters["13"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/dependencies/additionalProperties/anyOf/0}
*/
export function mockDependencies0(): types.Dependencies0 {
depthCounters["14"] ??= 0;
try {
depthCounters["14"]++;
return (mockSchema());
}
finally {
depthCounters["14"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/schema#/properties/dependencies/additionalProperties/anyOf/1}
*/
export function mockDependencies1(): types.Dependencies1 {
depthCounters["15"] ??= 0;
try {
depthCounters["15"]++;
return (mockStringArray());
}
finally {
depthCounters["15"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/$defs/anchorString}
*/
export function mockAnchorString(): types.AnchorString {
depthCounters["16"] ??= 0;
try {
depthCounters["16"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["16"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/$defs/uriReferenceString}
*/
export function mockUriReferenceString(): types.UriReferenceString {
depthCounters["17"] ??= 0;
try {
depthCounters["17"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["17"]--;
}
}
/**
* @summary Core vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/core}
*/
export function mockCore(): types.Core {
depthCounters["18"] ??= 0;
try {
depthCounters["18"]++;
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"$id": (depthCounters["20"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockId() : undefined,
"$schema": (depthCounters["19"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockCoreSchema() : undefined,
"$ref": (depthCounters["17"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRef() : undefined,
"$anchor": (depthCounters["16"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockAnchor() : undefined,
"$dynamicRef": (depthCounters["17"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDynamicRef() : undefined,
"$dynamicAnchor": (depthCounters["16"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDynamicAnchor() : undefined,
"$vocabulary": (depthCounters["26"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockVocabulary() : undefined,
"$comment": (depthCounters["27"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockComment() : undefined,
"$defs": (depthCounters["28"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDefs() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
finally {
depthCounters["18"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/$defs/uriString}
*/
export function mockUriString(): types.UriString {
depthCounters["19"] ??= 0;
try {
depthCounters["19"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["19"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$id}
*/
export function mockId(): types.Id {
depthCounters["20"] ??= 0;
try {
depthCounters["20"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["20"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$schema}
*/
export function mockCoreSchema(): types.CoreSchema {
depthCounters["21"] ??= 0;
try {
depthCounters["21"]++;
return (mockUriString());
}
finally {
depthCounters["21"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$ref}
*/
export function mockRef(): types.Ref {
depthCounters["22"] ??= 0;
try {
depthCounters["22"]++;
return (mockUriReferenceString());
}
finally {
depthCounters["22"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$anchor}
*/
export function mockAnchor(): types.Anchor {
depthCounters["23"] ??= 0;
try {
depthCounters["23"]++;
return (mockAnchorString());
}
finally {
depthCounters["23"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$dynamicRef}
*/
export function mockDynamicRef(): types.DynamicRef {
depthCounters["24"] ??= 0;
try {
depthCounters["24"]++;
return (mockUriReferenceString());
}
finally {
depthCounters["24"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$dynamicAnchor}
*/
export function mockDynamicAnchor(): types.DynamicAnchor {
depthCounters["25"] ??= 0;
try {
depthCounters["25"]++;
return (mockAnchorString());
}
finally {
depthCounters["25"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary}
*/
export function mockVocabulary(): types.Vocabulary {
depthCounters["26"] ??= 0;
try {
depthCounters["26"]++;
return (
(depthCounters["29"] ?? 0) < maximumDepth ? {
[mockVocabularyPropertyNames()]: mockVocabularyAdditionalProperties(),
[mockVocabularyPropertyNames()]: mockVocabularyAdditionalProperties(),
[mockVocabularyPropertyNames()]: mockVocabularyAdditionalProperties(),
[mockVocabularyPropertyNames()]: mockVocabularyAdditionalProperties(),
[mockVocabularyPropertyNames()]: mockVocabularyAdditionalProperties(),
} : {}
);
}
finally {
depthCounters["26"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$comment}
*/
export function mockComment(): types.Comment {
depthCounters["27"] ??= 0;
try {
depthCounters["27"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["27"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$defs}
*/
export function mockDefs(): types.Defs {
depthCounters["28"] ??= 0;
try {
depthCounters["28"]++;
return (
(depthCounters["0"] ?? 0) < maximumDepth ? {
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefsAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefsAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefsAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefsAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDefsAdditionalProperties(),
} : {}
);
}
finally {
depthCounters["28"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary/additionalProperties}
*/
export function mockVocabularyAdditionalProperties(): types.VocabularyAdditionalProperties {
depthCounters["29"] ??= 0;
try {
depthCounters["29"]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters["29"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary/propertyNames}
*/
export function mockVocabularyPropertyNames(): types.VocabularyPropertyNames {
depthCounters["30"] ??= 0;
try {
depthCounters["30"]++;
return (mockUriString());
}
finally {
depthCounters["30"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$defs/additionalProperties}
*/
export function mockDefsAdditionalProperties(): types.DefsAdditionalProperties {
depthCounters["31"] ??= 0;
try {
depthCounters["31"]++;
return (mockSchema());
}
finally {
depthCounters["31"]--;
}
}
/**
* @summary Applicator vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator}
*/
export function mockApplicator(): types.Applicator {
depthCounters["32"] ??= 0;
try {
depthCounters["32"]++;
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"prefixItems": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockPrefixItems() : undefined,
"items": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockApplicatorItems() : undefined,
"contains": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContains() : undefined,
"additionalProperties": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockApplicatorAdditionalProperties() : undefined,
"properties": (depthCounters["38"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockProperties() : undefined,
"patternProperties": (depthCounters["39"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"dependentSchemas": (depthCounters["40"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"propertyNames": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockApplicatorPropertyNames() : undefined,
"if": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockElse() : undefined,
"allOf": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"anyOf": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"oneOf": (depthCounters["33"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"not": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockNot() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
finally {
depthCounters["32"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/$defs/schemaArray}
*/
export function mockSchemaArray(): types.SchemaArray {
depthCounters["33"] ??= 0;
try {
depthCounters["33"]++;
return (
(depthCounters["0"] ?? 0) < maximumDepth ? [
mockSchemaArrayItems(),
mockSchemaArrayItems(),
mockSchemaArrayItems(),
mockSchemaArrayItems(),
mockSchemaArrayItems(),
] : []
);
}
finally {
depthCounters["33"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/prefixItems}
*/
export function mockPrefixItems(): types.PrefixItems {
depthCounters["34"] ??= 0;
try {
depthCounters["34"]++;
return (mockSchemaArray());
}
finally {
depthCounters["34"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/items}
*/
export function mockApplicatorItems(): types.ApplicatorItems {
depthCounters["35"] ??= 0;
try {
depthCounters["35"]++;
return (mockSchema());
}
finally {
depthCounters["35"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/contains}
*/
export function mockContains(): types.Contains {
depthCounters["36"] ??= 0;
try {
depthCounters["36"]++;
return (mockSchema());
}
finally {
depthCounters["36"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/additionalProperties}
*/
export function mockApplicatorAdditionalProperties(): types.ApplicatorAdditionalProperties {
depthCounters["37"] ??= 0;
try {
depthCounters["37"]++;
return (mockSchema());
}
finally {
depthCounters["37"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/properties}
*/
export function mockProperties(): types.Properties {
depthCounters["38"] ??= 0;
try {
depthCounters["38"]++;
return (
(depthCounters["0"] ?? 0) < maximumDepth ? {
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockPropertiesAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockPropertiesAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockPropertiesAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockPropertiesAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockPropertiesAdditionalProperties(),
} : {}
);
}
finally {
depthCounters["38"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties}
*/
export function mockPatternProperties(): types.PatternProperties {
depthCounters["39"] ??= 0;
try {
depthCounters["39"]++;
return (
(depthCounters["0"] ?? 0) < maximumDepth ? {
[mockPatternPropertiesPropertyNames()]: mockPatternPropertiesAdditionalProperties(),
[mockPatternPropertiesPropertyNames()]: mockPatternPropertiesAdditionalProperties(),
[mockPatternPropertiesPropertyNames()]: mockPatternPropertiesAdditionalProperties(),
[mockPatternPropertiesPropertyNames()]: mockPatternPropertiesAdditionalProperties(),
[mockPatternPropertiesPropertyNames()]: mockPatternPropertiesAdditionalProperties(),
} : {}
);
}
finally {
depthCounters["39"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/dependentSchemas}
*/
export function mockDependentSchemas(): types.DependentSchemas {
depthCounters["40"] ??= 0;
try {
depthCounters["40"]++;
return (
(depthCounters["0"] ?? 0) < maximumDepth ? {
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentSchemasAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentSchemasAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentSchemasAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentSchemasAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentSchemasAdditionalProperties(),
} : {}
);
}
finally {
depthCounters["40"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/propertyNames}
*/
export function mockApplicatorPropertyNames(): types.ApplicatorPropertyNames {
depthCounters["41"] ??= 0;
try {
depthCounters["41"]++;
return (mockSchema());
}
finally {
depthCounters["41"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/if}
*/
export function mockIf(): types.If {
depthCounters["42"] ??= 0;
try {
depthCounters["42"]++;
return (mockSchema());
}
finally {
depthCounters["42"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/then}
*/
export function mockThen(): types.Then {
depthCounters["43"] ??= 0;
try {
depthCounters["43"]++;
return (mockSchema());
}
finally {
depthCounters["43"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/else}
*/
export function mockElse(): types.Else {
depthCounters["44"] ??= 0;
try {
depthCounters["44"]++;
return (mockSchema());
}
finally {
depthCounters["44"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/allOf}
*/
export function mockAllOf(): types.AllOf {
depthCounters["45"] ??= 0;
try {
depthCounters["45"]++;
return (mockSchemaArray());
}
finally {
depthCounters["45"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/anyOf}
*/
export function mockAnyOf(): types.AnyOf {
depthCounters["46"] ??= 0;
try {
depthCounters["46"]++;
return (mockSchemaArray());
}
finally {
depthCounters["46"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/oneOf}
*/
export function mockOneOf(): types.OneOf {
depthCounters["47"] ??= 0;
try {
depthCounters["47"]++;
return (mockSchemaArray());
}
finally {
depthCounters["47"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/not}
*/
export function mockNot(): types.Not {
depthCounters["48"] ??= 0;
try {
depthCounters["48"]++;
return (mockSchema());
}
finally {
depthCounters["48"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/$defs/schemaArray/items}
*/
export function mockSchemaArrayItems(): types.SchemaArrayItems {
depthCounters["49"] ??= 0;
try {
depthCounters["49"]++;
return (mockSchema());
}
finally {
depthCounters["49"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/properties/additionalProperties}
*/
export function mockPropertiesAdditionalProperties(): types.PropertiesAdditionalProperties {
depthCounters["50"] ??= 0;
try {
depthCounters["50"]++;
return (mockSchema());
}
finally {
depthCounters["50"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties/additionalProperties}
*/
export function mockPatternPropertiesAdditionalProperties(): types.PatternPropertiesAdditionalProperties {
depthCounters["51"] ??= 0;
try {
depthCounters["51"]++;
return (mockSchema());
}
finally {
depthCounters["51"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties/propertyNames}
*/
export function mockPatternPropertiesPropertyNames(): types.PatternPropertiesPropertyNames {
depthCounters["52"] ??= 0;
try {
depthCounters["52"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["52"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/dependentSchemas/additionalProperties}
*/
export function mockDependentSchemasAdditionalProperties(): types.DependentSchemasAdditionalProperties {
depthCounters["53"] ??= 0;
try {
depthCounters["53"]++;
return (mockSchema());
}
finally {
depthCounters["53"]--;
}
}
/**
* @summary Unevaluated applicator vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/unevaluated}
*/
export function mockUnevaluated(): types.Unevaluated {
depthCounters["54"] ??= 0;
try {
depthCounters["54"]++;
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"unevaluatedItems": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockUnevaluatedItems() : undefined,
"unevaluatedProperties": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockUnevaluatedProperties() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
finally {
depthCounters["54"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/unevaluated#/properties/unevaluatedItems}
*/
export function mockUnevaluatedItems(): types.UnevaluatedItems {
depthCounters["55"] ??= 0;
try {
depthCounters["55"]++;
return (mockSchema());
}
finally {
depthCounters["55"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/unevaluated#/properties/unevaluatedProperties}
*/
export function mockUnevaluatedProperties(): types.UnevaluatedProperties {
depthCounters["56"] ??= 0;
try {
depthCounters["56"]++;
return (mockSchema());
}
finally {
depthCounters["56"]--;
}
}
/**
* @summary Validation vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/validation}
*/
export function mockValidation(): types.Validation {
depthCounters["57"] ??= 0;
try {
depthCounters["57"]++;
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"type": (depthCounters["62"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockType() : undefined,
"const": (depthCounters["63"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockConst() : undefined,
"enum": (depthCounters["64"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockEnum() : undefined,
"multipleOf": (depthCounters["65"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"maximum": (depthCounters["66"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaximum() : undefined,
"exclusiveMaximum": (depthCounters["67"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockExclusiveMaximum() : undefined,
"minimum": (depthCounters["68"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinimum() : undefined,
"exclusiveMinimum": (depthCounters["69"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockExclusiveMinimum() : undefined,
"maxLength": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxLength() : undefined,
"minLength": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinLength() : undefined,
"pattern": (depthCounters["72"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockPattern() : undefined,
"maxItems": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxItems() : undefined,
"minItems": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinItems() : undefined,
"uniqueItems": (depthCounters["75"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"maxContains": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxContains() : undefined,
"minContains": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinContains() : undefined,
"maxProperties": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMaxProperties() : undefined,
"minProperties": (depthCounters["58"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockMinProperties() : undefined,
"required": (depthCounters["61"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"dependentRequired": (depthCounters["81"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDependentRequired() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
finally {
depthCounters["57"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/nonNegativeInteger}
*/
export function mockNonNegativeInteger(): types.NonNegativeInteger {
depthCounters["58"] ??= 0;
try {
depthCounters["58"]++;
return (randomNumber({"isMinimumInclusive":true,"isMaximumInclusive":false,"minimumValue":0,"maximumValue":100000,"precisionOffset":1,"precisionRange":1}));
}
finally {
depthCounters["58"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/nonNegativeIntegerDefault0}
*/
export function mockNonNegativeIntegerDefault0(): types.NonNegativeIntegerDefault0 {
depthCounters["59"] ??= 0;
try {
depthCounters["59"]++;
return (mockNonNegativeInteger());
}
finally {
depthCounters["59"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/simpleTypes}
*/
export function mockSimpleTypes(): types.SimpleTypes {
depthCounters["60"] ??= 0;
try {
depthCounters["60"]++;
return ((["array", "boolean", "integer", "null", "number", "object", "string"] as const)[nextSeed() % 7]);
}
finally {
depthCounters["60"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray}
*/
export function mockStringArray(): types.StringArray {
depthCounters["61"] ??= 0;
try {
depthCounters["61"]++;
return (
(depthCounters["82"] ?? 0) < maximumDepth ? [
mockStringArrayItems(),
mockStringArrayItems(),
mockStringArrayItems(),
mockStringArrayItems(),
mockStringArrayItems(),
] : []
);
}
finally {
depthCounters["61"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/type}
*/
export function mockType(): types.Type {
depthCounters["62"] ??= 0;
try {
depthCounters["62"]++;
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return (mockType0());
case 1:
return (mockType1());
}
})()
);
}
finally {
depthCounters["62"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/const}
*/
export function mockConst(): types.Const {
depthCounters["63"] ??= 0;
try {
depthCounters["63"]++;
return (
// any
{}
);
}
finally {
depthCounters["63"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/enum}
*/
export function mockEnum(): types.Enum {
depthCounters["64"] ??= 0;
try {
depthCounters["64"]++;
return (
(depthCounters["85"] ?? 0) < maximumDepth ? [
mockEnumItems(),
mockEnumItems(),
mockEnumItems(),
mockEnumItems(),
mockEnumItems(),
] : []
);
}
finally {
depthCounters["64"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/multipleOf}
*/
export function mockMultipleOf(): types.MultipleOf {
depthCounters["65"] ??= 0;
try {
depthCounters["65"]++;
return (randomNumber({"isMinimumInclusive":false,"isMaximumInclusive":false,"minimumValue":0,"maximumValue":1000,"precisionOffset":100,"precisionRange":900}));
}
finally {
depthCounters["65"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maximum}
*/
export function mockMaximum(): types.Maximum {
depthCounters["66"] ??= 0;
try {
depthCounters["66"]++;
return (randomNumber({"isMinimumInclusive":false,"isMaximumInclusive":false,"minimumValue":-1000,"maximumValue":1000,"precisionOffset":100,"precisionRange":900}));
}
finally {
depthCounters["66"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/exclusiveMaximum}
*/
export function mockExclusiveMaximum(): types.ExclusiveMaximum {
depthCounters["67"] ??= 0;
try {
depthCounters["67"]++;
return (randomNumber({"isMinimumInclusive":false,"isMaximumInclusive":false,"minimumValue":-1000,"maximumValue":1000,"precisionOffset":100,"precisionRange":900}));
}
finally {
depthCounters["67"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minimum}
*/
export function mockMinimum(): types.Minimum {
depthCounters["68"] ??= 0;
try {
depthCounters["68"]++;
return (randomNumber({"isMinimumInclusive":false,"isMaximumInclusive":false,"minimumValue":-1000,"maximumValue":1000,"precisionOffset":100,"precisionRange":900}));
}
finally {
depthCounters["68"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/exclusiveMinimum}
*/
export function mockExclusiveMinimum(): types.ExclusiveMinimum {
depthCounters["69"] ??= 0;
try {
depthCounters["69"]++;
return (randomNumber({"isMinimumInclusive":false,"isMaximumInclusive":false,"minimumValue":-1000,"maximumValue":1000,"precisionOffset":100,"precisionRange":900}));
}
finally {
depthCounters["69"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maxLength}
*/
export function mockMaxLength(): types.MaxLength {
depthCounters["70"] ??= 0;
try {
depthCounters["70"]++;
return (mockNonNegativeInteger());
}
finally {
depthCounters["70"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minLength}
*/
export function mockMinLength(): types.MinLength {
depthCounters["71"] ??= 0;
try {
depthCounters["71"]++;
return (mockNonNegativeIntegerDefault0());
}
finally {
depthCounters["71"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/pattern}
*/
export function mockPattern(): types.Pattern {
depthCounters["72"] ??= 0;
try {
depthCounters["72"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["72"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maxItems}
*/
export function mockMaxItems(): types.MaxItems {
depthCounters["73"] ??= 0;
try {
depthCounters["73"]++;
return (mockNonNegativeInteger());
}
finally {
depthCounters["73"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minItems}
*/
export function mockMinItems(): types.MinItems {
depthCounters["74"] ??= 0;
try {
depthCounters["74"]++;
return (mockNonNegativeIntegerDefault0());
}
finally {
depthCounters["74"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/uniqueItems}
*/
export function mockUniqueItems(): types.UniqueItems {
depthCounters["75"] ??= 0;
try {
depthCounters["75"]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters["75"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maxContains}
*/
export function mockMaxContains(): types.MaxContains {
depthCounters["76"] ??= 0;
try {
depthCounters["76"]++;
return (mockNonNegativeInteger());
}
finally {
depthCounters["76"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minContains}
*/
export function mockMinContains(): types.MinContains {
depthCounters["77"] ??= 0;
try {
depthCounters["77"]++;
return (mockNonNegativeInteger());
}
finally {
depthCounters["77"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maxProperties}
*/
export function mockMaxProperties(): types.MaxProperties {
depthCounters["78"] ??= 0;
try {
depthCounters["78"]++;
return (mockNonNegativeInteger());
}
finally {
depthCounters["78"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minProperties}
*/
export function mockMinProperties(): types.MinProperties {
depthCounters["79"] ??= 0;
try {
depthCounters["79"]++;
return (mockNonNegativeIntegerDefault0());
}
finally {
depthCounters["79"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/required}
*/
export function mockRequired(): types.Required {
depthCounters["80"] ??= 0;
try {
depthCounters["80"]++;
return (mockStringArray());
}
finally {
depthCounters["80"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/dependentRequired}
*/
export function mockDependentRequired(): types.DependentRequired {
depthCounters["81"] ??= 0;
try {
depthCounters["81"]++;
return (
(depthCounters["61"] ?? 0) < maximumDepth ? {
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentRequiredAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentRequiredAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentRequiredAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentRequiredAdditionalProperties(),
[(randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}))]: mockDependentRequiredAdditionalProperties(),
} : {}
);
}
finally {
depthCounters["81"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray/items}
*/
export function mockStringArrayItems(): types.StringArrayItems {
depthCounters["82"] ??= 0;
try {
depthCounters["82"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["82"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/type/anyOf/0}
*/
export function mockType0(): types.Type0 {
depthCounters["83"] ??= 0;
try {
depthCounters["83"]++;
return (mockSimpleTypes());
}
finally {
depthCounters["83"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/type/anyOf/1}
*/
export function mockType1(): types.Type1 {
depthCounters["84"] ??= 0;
try {
depthCounters["84"]++;
return (
(depthCounters["60"] ?? 0) < maximumDepth ? [
mockTypeItems(),
mockTypeItems(),
mockTypeItems(),
mockTypeItems(),
mockTypeItems(),
] : []
);
}
finally {
depthCounters["84"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/enum/items}
*/
export function mockEnumItems(): types.EnumItems {
depthCounters["85"] ??= 0;
try {
depthCounters["85"]++;
return (
// any
{}
);
}
finally {
depthCounters["85"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/dependentRequired/additionalProperties}
*/
export function mockDependentRequiredAdditionalProperties(): types.DependentRequiredAdditionalProperties {
depthCounters["86"] ??= 0;
try {
depthCounters["86"]++;
return (mockStringArray());
}
finally {
depthCounters["86"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/type/anyOf/1/items}
*/
export function mockTypeItems(): types.TypeItems {
depthCounters["87"] ??= 0;
try {
depthCounters["87"]++;
return (mockSimpleTypes());
}
finally {
depthCounters["87"]--;
}
}
/**
* @summary Meta-data vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data}
*/
export function mockMetaData(): types.MetaData {
depthCounters["88"] ??= 0;
try {
depthCounters["88"]++;
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"title": (depthCounters["89"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": (depthCounters["90"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"default": (depthCounters["91"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDefault() : undefined,
"deprecated": (depthCounters["92"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"readOnly": (depthCounters["93"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockReadOnly() : undefined,
"writeOnly": (depthCounters["94"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockWriteOnly() : undefined,
"examples": (depthCounters["95"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockExamples() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
finally {
depthCounters["88"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/title}
*/
export function mockTitle(): types.Title {
depthCounters["89"] ??= 0;
try {
depthCounters["89"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["89"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/description}
*/
export function mockDescription(): types.Description {
depthCounters["90"] ??= 0;
try {
depthCounters["90"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["90"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/default}
*/
export function mockDefault(): types.Default {
depthCounters["91"] ??= 0;
try {
depthCounters["91"]++;
return (
// any
{}
);
}
finally {
depthCounters["91"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/deprecated}
*/
export function mockDeprecated(): types.Deprecated {
depthCounters["92"] ??= 0;
try {
depthCounters["92"]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters["92"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/readOnly}
*/
export function mockReadOnly(): types.ReadOnly {
depthCounters["93"] ??= 0;
try {
depthCounters["93"]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters["93"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/writeOnly}
*/
export function mockWriteOnly(): types.WriteOnly {
depthCounters["94"] ??= 0;
try {
depthCounters["94"]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters["94"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/examples}
*/
export function mockExamples(): types.Examples {
depthCounters["95"] ??= 0;
try {
depthCounters["95"]++;
return (
(depthCounters["96"] ?? 0) < maximumDepth ? [
mockExamplesItems(),
mockExamplesItems(),
mockExamplesItems(),
mockExamplesItems(),
mockExamplesItems(),
] : []
);
}
finally {
depthCounters["95"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/examples/items}
*/
export function mockExamplesItems(): types.ExamplesItems {
depthCounters["96"] ??= 0;
try {
depthCounters["96"]++;
return (
// any
{}
);
}
finally {
depthCounters["96"]--;
}
}
/**
* @summary Format vocabulary meta-schema for annotation results
* @see {@link https://json-schema.org/draft/2020-12/meta/format-annotation}
*/
export function mockFormatAnnotation(): types.FormatAnnotation {
depthCounters["97"] ??= 0;
try {
depthCounters["97"]++;
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"format": (depthCounters["98"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockFormat() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
finally {
depthCounters["97"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/format-annotation#/properties/format}
*/
export function mockFormat(): types.Format {
depthCounters["98"] ??= 0;
try {
depthCounters["98"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["98"]--;
}
}
/**
* @summary Content vocabulary meta-schema
* @see {@link https://json-schema.org/draft/2020-12/meta/content}
*/
export function mockContent(): types.Content {
depthCounters["99"] ??= 0;
try {
depthCounters["99"]++;
return (
(() => {
switch (
(
nextSeed() % 2
) as 0 | 1
) {
case 0:
return ((
{
"contentEncoding": (depthCounters["100"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContentEncoding() : undefined,
"contentMediaType": (depthCounters["101"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContentMediaType() : undefined,
"contentSchema": (depthCounters["0"] ?? 0) < maximumDepth && Boolean(nextSeed() % 2) ? mockContentSchema() : undefined,
}
));
case 1:
return ((Boolean(nextSeed() % 2)));
}
})()
);
}
finally {
depthCounters["99"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/content#/properties/contentEncoding}
*/
export function mockContentEncoding(): types.ContentEncoding {
depthCounters["100"] ??= 0;
try {
depthCounters["100"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["100"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/content#/properties/contentMediaType}
*/
export function mockContentMediaType(): types.ContentMediaType {
depthCounters["101"] ??= 0;
try {
depthCounters["101"]++;
return (randomString({"lengthOffset":3,"lengthRange":12,"chars":"abcdefghijklmnopqrstuvwxyz"}));
}
finally {
depthCounters["101"]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/content#/properties/contentSchema}
*/
export function mockContentSchema(): types.ContentSchema {
depthCounters["102"] ??= 0;
try {
depthCounters["102"]++;
return (mockSchema());
}
finally {
depthCounters["102"]--;
}
}
let seed = 1;
function nextSeed() {
// https://en.wikipedia.org/wiki/Linear_congruential_generator
// https://statmath.wu.ac.at/software/src/prng-3.0.2/doc/prng.html/Table_LCG.html
const p = Math.pow(2, 31) - 1;
const a = 950706376;
const b = 0;
seed = (a * seed + b) % p;
return seed;
}
interface RandomStringArguments {
lengthOffset: number,
lengthRange: number,
chars: string,
}
// TODO verify that this does exactly what we want it to do
function randomString({
lengthOffset,
lengthRange,
chars,
}: RandomStringArguments) {
const length = lengthOffset + nextSeed() % lengthRange;
let value = ""
while(value.length < length) {
value += chars[nextSeed() % chars.length];
}
return value;
}
interface RandomNumberArguments {
isMinimumInclusive: boolean;
isMaximumInclusive: boolean;
minimumValue: number;
maximumValue: number;
precisionOffset: number,
precisionRange: number,
}
// TODO verify that this does exactly what we want it to do
function randomNumber({
isMinimumInclusive,
isMaximumInclusive,
minimumValue,
maximumValue,
precisionOffset,
precisionRange,
}: RandomNumberArguments) {
const precision = precisionOffset + nextSeed() % precisionRange;
const inclusiveMinimumValue = isMinimumInclusive ? minimumValue : minimumValue + (1 / precision);
const inclusiveMaximumValue = isMaximumInclusive ? maximumValue : maximumValue - (1 / precision);
const valueOffset = inclusiveMinimumValue * precision;
const valueRange = (inclusiveMaximumValue - inclusiveMinimumValue) * precision;
const value = (valueOffset + nextSeed() % valueRange) / precision;
return value;
}
