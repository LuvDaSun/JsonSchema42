// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.11.8                         -- www.JsonSchema42.org
//
import * as types from "./types.js";
const depthCounters: Record<string, number> = {};
export const unknownValue = {};
export const anyValue = {};
export const neverValue = {};
export interface MockGeneratorOptions {
maximumDepth?: number;
numberPrecision?: number;
stringCharacters?: string;
defaultMinimumValue?: number;
defaultMaximumValue?: number;
defaultMinimumItems?: number;
defaultMaximumItems?: number;
defaultMinimumProperties?: number;
defaultMaximumProperties?: number;
defaultMinimumStringLength?: number;
defaultMaximumStringLength?: number;
}
const defaultMockGeneratorOptions = {
maximumDepth: 1,
numberPrecision: 1000,
stringCharacters: "abcdefghijklmnopqrstuvwxyz",
defaultMinimumValue: -1000,
defaultMaximumValue: 1000,
defaultMinimumItems: 1,
defaultMaximumItems: 5,
defaultMinimumProperties: 1,
defaultMaximumProperties: 5,
defaultMinimumStringLength: 5,
defaultMaximumStringLength: 20,
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/$defs/anchorString}
*/
export function mockAnchorString(options: MockGeneratorOptions = {}): types.AnchorString {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[16] ??= 0;
try {
depthCounters[16]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[16]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/$defs/uriReferenceString}
*/
export function mockUriReferenceString(options: MockGeneratorOptions = {}): types.UriReferenceString {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[17] ??= 0;
try {
depthCounters[17]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[17]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/$defs/uriString}
*/
export function mockUriString(options: MockGeneratorOptions = {}): types.UriString {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[19] ??= 0;
try {
depthCounters[19]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[19]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$comment}
*/
export function mockComment(options: MockGeneratorOptions = {}): types.Comment {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[27] ??= 0;
try {
depthCounters[27]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[27]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/core#/properties/$vocabulary/additionalProperties}
*/
export function mockVocabularyAdditionalProperties(options: MockGeneratorOptions = {}): types.VocabularyAdditionalProperties {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[29] ??= 0;
try {
depthCounters[29]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[29]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/applicator#/properties/patternProperties/propertyNames}
*/
export function mockPatternPropertiesPropertyNames(options: MockGeneratorOptions = {}): types.PatternPropertiesPropertyNames {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[52] ??= 0;
try {
depthCounters[52]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[52]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/nonNegativeInteger}
*/
export function mockNonNegativeInteger(options: MockGeneratorOptions = {}): types.NonNegativeInteger {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[58] ??= 0;
try {
depthCounters[58]++;
return (
(Math.ceil(0 / 1) + nextSeed() % (Math.floor(configuration.defaultMaximumValue / 1) - Math.ceil(0 / 1) + 1)) * 1
);
}
finally {
depthCounters[58]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/simpleTypes}
*/
export function mockSimpleTypes(options: MockGeneratorOptions = {}): types.SimpleTypes {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[60] ??= 0;
try {
depthCounters[60]++;
return ((["array", "boolean", "integer", "null", "number", "object", "string"] as const)[nextSeed() % 7]);
}
finally {
depthCounters[60]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/multipleOf}
*/
export function mockMultipleOf(options: MockGeneratorOptions = {}): types.MultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[65] ??= 0;
try {
depthCounters[65]++;
return (
((0 * configuration.numberPrecision + 1) + nextSeed() % ((configuration.defaultMaximumValue * configuration.numberPrecision) - (0 * configuration.numberPrecision + 1) + 1) / configuration.numberPrecision)
);
}
finally {
depthCounters[65]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/maximum}
*/
export function mockMaximum(options: MockGeneratorOptions = {}): types.Maximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[66] ??= 0;
try {
depthCounters[66]++;
return (
(configuration.defaultMinimumValue * configuration.numberPrecision + nextSeed() % ((configuration.defaultMaximumValue * configuration.numberPrecision) - configuration.defaultMinimumValue * configuration.numberPrecision + 1) / configuration.numberPrecision)
);
}
finally {
depthCounters[66]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/exclusiveMaximum}
*/
export function mockExclusiveMaximum(options: MockGeneratorOptions = {}): types.ExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[67] ??= 0;
try {
depthCounters[67]++;
return (
(configuration.defaultMinimumValue * configuration.numberPrecision + nextSeed() % ((configuration.defaultMaximumValue * configuration.numberPrecision) - configuration.defaultMinimumValue * configuration.numberPrecision + 1) / configuration.numberPrecision)
);
}
finally {
depthCounters[67]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/minimum}
*/
export function mockMinimum(options: MockGeneratorOptions = {}): types.Minimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[68] ??= 0;
try {
depthCounters[68]++;
return (
(configuration.defaultMinimumValue * configuration.numberPrecision + nextSeed() % ((configuration.defaultMaximumValue * configuration.numberPrecision) - configuration.defaultMinimumValue * configuration.numberPrecision + 1) / configuration.numberPrecision)
);
}
finally {
depthCounters[68]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/exclusiveMinimum}
*/
export function mockExclusiveMinimum(options: MockGeneratorOptions = {}): types.ExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[69] ??= 0;
try {
depthCounters[69]++;
return (
(configuration.defaultMinimumValue * configuration.numberPrecision + nextSeed() % ((configuration.defaultMaximumValue * configuration.numberPrecision) - configuration.defaultMinimumValue * configuration.numberPrecision + 1) / configuration.numberPrecision)
);
}
finally {
depthCounters[69]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/pattern}
*/
export function mockPattern(options: MockGeneratorOptions = {}): types.Pattern {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[72] ??= 0;
try {
depthCounters[72]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[72]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/properties/uniqueItems}
*/
export function mockUniqueItems(options: MockGeneratorOptions = {}): types.UniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[75] ??= 0;
try {
depthCounters[75]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[75]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray/items}
*/
export function mockStringArrayItems(options: MockGeneratorOptions = {}): types.StringArrayItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[82] ??= 0;
try {
depthCounters[82]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[82]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/title}
*/
export function mockTitle(options: MockGeneratorOptions = {}): types.Title {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[89] ??= 0;
try {
depthCounters[89]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[89]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/description}
*/
export function mockDescription(options: MockGeneratorOptions = {}): types.Description {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[90] ??= 0;
try {
depthCounters[90]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[90]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/deprecated}
*/
export function mockDeprecated(options: MockGeneratorOptions = {}): types.Deprecated {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[92] ??= 0;
try {
depthCounters[92]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[92]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/readOnly}
*/
export function mockReadOnly(options: MockGeneratorOptions = {}): types.ReadOnly {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[93] ??= 0;
try {
depthCounters[93]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[93]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/meta-data#/properties/writeOnly}
*/
export function mockWriteOnly(options: MockGeneratorOptions = {}): types.WriteOnly {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[94] ??= 0;
try {
depthCounters[94]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[94]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/format-annotation#/properties/format}
*/
export function mockFormat(options: MockGeneratorOptions = {}): types.Format {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[98] ??= 0;
try {
depthCounters[98]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[98]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/content#/properties/contentEncoding}
*/
export function mockContentEncoding(options: MockGeneratorOptions = {}): types.ContentEncoding {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[100] ??= 0;
try {
depthCounters[100]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[100]--;
}
}
/**
* @see {@link https://json-schema.org/draft/2020-12/meta/content#/properties/contentMediaType}
*/
export function mockContentMediaType(options: MockGeneratorOptions = {}): types.ContentMediaType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[101] ??= 0;
try {
depthCounters[101]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[101]--;
}
}
let seed = 1;
function nextSeed() {
// https://en.wikipedia.org/wiki/Linear_congruential_generator
// https://statmath.wu.ac.at/software/src/prng-3.0.2/doc/prng.html/Table_LCG.html
const p = Math.pow(2, 31) - 1;
const a = 950706376;
const b = 0;
seed = (a * seed + b) % p;
return seed;
}
