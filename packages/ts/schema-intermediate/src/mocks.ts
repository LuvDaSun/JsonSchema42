// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.11.8                         -- www.JsonSchema42.org
//
import * as types from "./types.js";
const depthCounters: Record<string, number> = {};
export const unknownValue = {};
export const anyValue = {};
export const neverValue = {};
export interface MockGeneratorOptions {
maximumDepth?: number;
numberPrecision?: number;
stringCharacters?: string;
defaultMinimumValue?: number;
defaultMaximumValue?: number;
defaultMinimumItems?: number;
defaultMaximumItems?: number;
defaultMinimumProperties?: number;
defaultMaximumProperties?: number;
defaultMinimumStringLength?: number;
defaultMaximumStringLength?: number;
}
const defaultMockGeneratorOptions = {
maximumDepth: 1,
numberPrecision: 1000,
stringCharacters: "abcdefghijklmnopqrstuvwxyz",
defaultMinimumValue: -1000,
defaultMaximumValue: 1000,
defaultMinimumItems: 1,
defaultMaximumItems: 5,
defaultMinimumProperties: 1,
defaultMaximumProperties: 5,
defaultMinimumStringLength: 5,
defaultMaximumStringLength: 20,
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node-reference}
*/
export function mockNodeReference(options: MockGeneratorOptions = {}): types.NodeReference {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[2] ??= 0;
try {
depthCounters[2]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[2]--;
}
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/integer-value}
*/
export function mockIntegerValue(options: MockGeneratorOptions = {}): types.IntegerValue {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[3] ??= 0;
try {
depthCounters[3]++;
return (
(Math.ceil(configuration.defaultMinimumValue / 1) + nextSeed() % (Math.floor(configuration.defaultMaximumValue / 1) - Math.ceil(configuration.defaultMinimumValue / 1) + 1)) * 1
);
}
finally {
depthCounters[3]--;
}
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/number-value}
*/
export function mockNumberValue(options: MockGeneratorOptions = {}): types.NumberValue {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[4] ??= 0;
try {
depthCounters[4]++;
return (
(configuration.defaultMinimumValue * configuration.numberPrecision + nextSeed() % ((configuration.defaultMaximumValue * configuration.numberPrecision) - configuration.defaultMinimumValue * configuration.numberPrecision + 1) / configuration.numberPrecision)
);
}
finally {
depthCounters[4]--;
}
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/boolean-value}
*/
export function mockBooleanValue(options: MockGeneratorOptions = {}): types.BooleanValue {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[5] ??= 0;
try {
depthCounters[5]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[5]--;
}
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/string-value}
*/
export function mockStringValue(options: MockGeneratorOptions = {}): types.StringValue {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[6] ??= 0;
try {
depthCounters[6]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[6]--;
}
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/non-empty-string-value}
*/
export function mockNonEmptyStringValue(options: MockGeneratorOptions = {}): types.NonEmptyStringValue {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[7] ??= 0;
try {
depthCounters[7]++;
return (
new Array(
configuration.defaultMinimumStringLength + nextSeed() % (configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[7]--;
}
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/amount}
*/
export function mockAmount(options: MockGeneratorOptions = {}): types.Amount {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[8] ??= 0;
try {
depthCounters[8]++;
return (
(Math.ceil(configuration.defaultMinimumValue / 1) + nextSeed() % (Math.floor(configuration.defaultMaximumValue / 1) - Math.ceil(configuration.defaultMinimumValue / 1) + 1)) * 1
);
}
finally {
depthCounters[8]--;
}
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/properties/$schema}
*/
export function mockSchema(options: MockGeneratorOptions = {}): types.Schema {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[9] ??= 0;
try {
depthCounters[9]++;
return ((["https://schema.JsonSchema42.org/jns42-intermediate/schema.json"] as const)[nextSeed() % 1]);
}
finally {
depthCounters[9]--;
}
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/uniqueItems}
*/
export function mockUniqueItems(options: MockGeneratorOptions = {}): types.UniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[44] ??= 0;
try {
depthCounters[44]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[44]--;
}
}
/**
* @see {@link https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/types/items}
*/
export function mockTypesItems(options: MockGeneratorOptions = {}): types.TypesItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[50] ??= 0;
try {
depthCounters[50]++;
return ((["never", "any", "null", "boolean", "integer", "number", "string", "array", "map"] as const)[nextSeed() % 9]);
}
finally {
depthCounters[50]--;
}
}
let seed = 1;
function nextSeed() {
// https://en.wikipedia.org/wiki/Linear_congruential_generator
// https://statmath.wu.ac.at/software/src/prng-3.0.2/doc/prng.html/Table_LCG.html
const p = Math.pow(2, 31) - 1;
const a = 950706376;
const b = 0;
seed = (a * seed + b) % p;
return seed;
}
