// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.9.6                          -- www.JsonSchema42.org
import * as types from "./types.js";
// https://schema.jsonschema42.org/jns42-intermediate/schema.json
export function mockSchemaDocument(): types.SchemaDocument {
return (
{
"$schema": mockSchema(),
"schemas": mockSchemas(),
}
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node
export function mockNode(): types.Node {
return (
{
"title": Boolean(nextSeed() % 2) ? mockTitle() : undefined,
"description": Boolean(nextSeed() % 2) ? mockDescription() : undefined,
"examples": Boolean(nextSeed() % 2) ? mockExamples() : undefined,
"deprecated": Boolean(nextSeed() % 2) ? mockDeprecated() : undefined,
"types": Boolean(nextSeed() % 2) ? mockTypes() : undefined,
"reference": Boolean(nextSeed() % 2) ? mockReference() : undefined,
"oneOf": Boolean(nextSeed() % 2) ? mockOneOf() : undefined,
"anyOf": Boolean(nextSeed() % 2) ? mockAnyOf() : undefined,
"allOf": Boolean(nextSeed() % 2) ? mockAllOf() : undefined,
"if": Boolean(nextSeed() % 2) ? mockIf() : undefined,
"then": Boolean(nextSeed() % 2) ? mockThen() : undefined,
"else": Boolean(nextSeed() % 2) ? mockElse() : undefined,
"not": Boolean(nextSeed() % 2) ? mockNot() : undefined,
"dependentSchemas": Boolean(nextSeed() % 2) ? mockDependentSchemas() : undefined,
"objectProperties": Boolean(nextSeed() % 2) ? mockObjectProperties() : undefined,
"mapProperties": Boolean(nextSeed() % 2) ? mockMapProperties() : undefined,
"patternProperties": Boolean(nextSeed() % 2) ? mockPatternProperties() : undefined,
"propertyNames": Boolean(nextSeed() % 2) ? mockPropertyNames() : undefined,
"tupleItems": Boolean(nextSeed() % 2) ? mockTupleItems() : undefined,
"arrayItems": Boolean(nextSeed() % 2) ? mockArrayItems() : undefined,
"contains": Boolean(nextSeed() % 2) ? mockContains() : undefined,
"options": Boolean(nextSeed() % 2) ? mockOptions() : undefined,
"minimumInclusive": Boolean(nextSeed() % 2) ? mockMinimumInclusive() : undefined,
"minimumExclusive": Boolean(nextSeed() % 2) ? mockMinimumExclusive() : undefined,
"maximumInclusive": Boolean(nextSeed() % 2) ? mockMaximumInclusive() : undefined,
"maximumExclusive": Boolean(nextSeed() % 2) ? mockMaximumExclusive() : undefined,
"multipleOf": Boolean(nextSeed() % 2) ? mockMultipleOf() : undefined,
"minimumLength": Boolean(nextSeed() % 2) ? mockMinimumLength() : undefined,
"maximumLength": Boolean(nextSeed() % 2) ? mockMaximumLength() : undefined,
"valuePattern": Boolean(nextSeed() % 2) ? mockValuePattern() : undefined,
"valueFormat": Boolean(nextSeed() % 2) ? mockValueFormat() : undefined,
"minimumItems": Boolean(nextSeed() % 2) ? mockMinimumItems() : undefined,
"maximumItems": Boolean(nextSeed() % 2) ? mockMaximumItems() : undefined,
"uniqueItems": Boolean(nextSeed() % 2) ? mockUniqueItems() : undefined,
"required": Boolean(nextSeed() % 2) ? mockRequired() : undefined,
"minimumProperties": Boolean(nextSeed() % 2) ? mockMinimumProperties() : undefined,
"maximumProperties": Boolean(nextSeed() % 2) ? mockMaximumProperties() : undefined,
}
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node-reference
export function mockNodeReference(): types.NodeReference {
return (randomString(10));
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/integer-value
export function mockIntegerValue(): types.IntegerValue {
return (Number(nextSeed() % 1000));
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/number-value
export function mockNumberValue(): types.NumberValue {
return (Number(nextSeed() % 1000 * 10) / 10);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/boolean-value
export function mockBooleanValue(): types.BooleanValue {
return (Boolean(nextSeed() % 2));
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/string-value
export function mockStringValue(): types.StringValue {
return (randomString(10));
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/non-empty-string-value
export function mockNonEmptyStringValue(): types.NonEmptyStringValue {
return (randomString(10));
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/amount
export function mockAmount(): types.Amount {
return (Number(nextSeed() % 1000));
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/properties/$schema
export function mockSchema(): types.Schema {
return ((["https://schema.JsonSchema42.org/jns42-intermediate/schema.json"] as const)[nextSeed() % 1]);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/properties/schemas
export function mockSchemas(): types.Schemas {
return (
{
[(randomString(10))]: mockSchemasAdditionalProperties(),
[(randomString(10))]: mockSchemasAdditionalProperties(),
[(randomString(10))]: mockSchemasAdditionalProperties(),
[(randomString(10))]: mockSchemasAdditionalProperties(),
[(randomString(10))]: mockSchemasAdditionalProperties(),
}
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/title
export function mockTitle(): types.Title {
return (mockNonEmptyStringValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/description
export function mockDescription(): types.Description {
return (mockNonEmptyStringValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/examples
export function mockExamples(): types.Examples {
return (
[
mockExamplesItems(),
mockExamplesItems(),
mockExamplesItems(),
mockExamplesItems(),
mockExamplesItems(),
]
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/deprecated
export function mockDeprecated(): types.Deprecated {
return (mockBooleanValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/types
export function mockTypes(): types.Types {
return (
[
mockTypesItems(),
mockTypesItems(),
mockTypesItems(),
mockTypesItems(),
mockTypesItems(),
]
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/reference
export function mockReference(): types.Reference {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/oneOf
export function mockOneOf(): types.OneOf {
return (
[
mockOneOfItems(),
mockOneOfItems(),
mockOneOfItems(),
mockOneOfItems(),
mockOneOfItems(),
]
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/anyOf
export function mockAnyOf(): types.AnyOf {
return (
[
mockAnyOfItems(),
mockAnyOfItems(),
mockAnyOfItems(),
mockAnyOfItems(),
mockAnyOfItems(),
]
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/allOf
export function mockAllOf(): types.AllOf {
return (
[
mockAllOfItems(),
mockAllOfItems(),
mockAllOfItems(),
mockAllOfItems(),
mockAllOfItems(),
]
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/if
export function mockIf(): types.If {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/then
export function mockThen(): types.Then {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/else
export function mockElse(): types.Else {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/not
export function mockNot(): types.Not {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/dependentSchemas
export function mockDependentSchemas(): types.DependentSchemas {
return (
{
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
[(randomString(10))]: mockDependentSchemasAdditionalProperties(),
}
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/objectProperties
export function mockObjectProperties(): types.ObjectProperties {
return (
{
[(randomString(10))]: mockObjectPropertiesAdditionalProperties(),
[(randomString(10))]: mockObjectPropertiesAdditionalProperties(),
[(randomString(10))]: mockObjectPropertiesAdditionalProperties(),
[(randomString(10))]: mockObjectPropertiesAdditionalProperties(),
[(randomString(10))]: mockObjectPropertiesAdditionalProperties(),
}
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/mapProperties
export function mockMapProperties(): types.MapProperties {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/patternProperties
export function mockPatternProperties(): types.PatternProperties {
return (
{
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
[(randomString(10))]: mockPatternPropertiesAdditionalProperties(),
}
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/propertyNames
export function mockPropertyNames(): types.PropertyNames {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/tupleItems
export function mockTupleItems(): types.TupleItems {
return (
[
mockTupleItemsItems(),
mockTupleItemsItems(),
mockTupleItemsItems(),
mockTupleItemsItems(),
mockTupleItemsItems(),
]
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/arrayItems
export function mockArrayItems(): types.ArrayItems {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/contains
export function mockContains(): types.Contains {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/options
export function mockOptions(): types.Options {
return (
[
mockOptionsItems(),
mockOptionsItems(),
mockOptionsItems(),
mockOptionsItems(),
mockOptionsItems(),
]
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/minimumInclusive
export function mockMinimumInclusive(): types.MinimumInclusive {
return (mockNumberValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/minimumExclusive
export function mockMinimumExclusive(): types.MinimumExclusive {
return (mockNumberValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/maximumInclusive
export function mockMaximumInclusive(): types.MaximumInclusive {
return (mockNumberValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/maximumExclusive
export function mockMaximumExclusive(): types.MaximumExclusive {
return (mockNumberValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/multipleOf
export function mockMultipleOf(): types.MultipleOf {
return (mockNumberValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/minimumLength
export function mockMinimumLength(): types.MinimumLength {
return (mockAmount());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/maximumLength
export function mockMaximumLength(): types.MaximumLength {
return (mockAmount());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/valuePattern
export function mockValuePattern(): types.ValuePattern {
return (mockNonEmptyStringValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/valueFormat
export function mockValueFormat(): types.ValueFormat {
return (mockNonEmptyStringValue());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/minimumItems
export function mockMinimumItems(): types.MinimumItems {
return (mockAmount());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/maximumItems
export function mockMaximumItems(): types.MaximumItems {
return (mockAmount());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/uniqueItems
export function mockUniqueItems(): types.UniqueItems {
return (Boolean(nextSeed() % 2));
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/required
export function mockRequired(): types.Required {
return (
[
mockRequiredItems(),
mockRequiredItems(),
mockRequiredItems(),
mockRequiredItems(),
mockRequiredItems(),
]
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/minimumProperties
export function mockMinimumProperties(): types.MinimumProperties {
return (mockAmount());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/maximumProperties
export function mockMaximumProperties(): types.MaximumProperties {
return (mockAmount());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/properties/schemas/additionalProperties
export function mockSchemasAdditionalProperties(): types.SchemasAdditionalProperties {
return (mockNode());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/examples/items
export function mockExamplesItems(): types.ExamplesItems {
return (
// any
{}
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/types/items
export function mockTypesItems(): types.TypesItems {
return ((["never", "any", "null", "boolean", "integer", "number", "string", "array", "map"] as const)[nextSeed() % 9]);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/oneOf/items
export function mockOneOfItems(): types.OneOfItems {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/anyOf/items
export function mockAnyOfItems(): types.AnyOfItems {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/allOf/items
export function mockAllOfItems(): types.AllOfItems {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/dependentSchemas/additionalProperties
export function mockDependentSchemasAdditionalProperties(): types.DependentSchemasAdditionalProperties {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/objectProperties/additionalProperties
export function mockObjectPropertiesAdditionalProperties(): types.ObjectPropertiesAdditionalProperties {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/patternProperties/additionalProperties
export function mockPatternPropertiesAdditionalProperties(): types.PatternPropertiesAdditionalProperties {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/tupleItems/items
export function mockTupleItemsItems(): types.TupleItemsItems {
return (mockNodeReference());
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/options/items
export function mockOptionsItems(): types.OptionsItems {
return (
// any
{}
);
}
// https://schema.jsonschema42.org/jns42-intermediate/schema.json#/$defs/node/properties/required/items
export function mockRequiredItems(): types.RequiredItems {
return (mockStringValue());
}
let seed = 1;
function nextSeed() {
// https://en.wikipedia.org/wiki/Linear_congruential_generator
// https://statmath.wu.ac.at/software/src/prng-3.0.2/doc/prng.html/Table_LCG.html
const p = Math.pow(2, 31) - 1;
const a = 950706376;
const b = 0;
seed = (a * seed + b) % p;
return seed;
}
const chars = "abcdefghijklmnopqrstuvwxyz";
function randomString(length: number) {
let str = ""
while(str.length < length) {
str += chars[nextSeed() % chars.length];
}
return str;
}
