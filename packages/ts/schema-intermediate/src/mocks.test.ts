// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.11.8                         -- www.JsonSchema42.org
//
import assert from "node:assert/strict";
import test from "node:test";
import * as validators from "./validators.js";
import * as mocks from "./mocks.js";
test("NodeReference", () => {
const mock = mocks.mockNodeReference();
const valid = validators.isNodeReference(mock);
assert.equal(valid, true);
});
test("IntegerValue", () => {
const mock = mocks.mockIntegerValue();
const valid = validators.isIntegerValue(mock);
assert.equal(valid, true);
});
test("NumberValue", () => {
const mock = mocks.mockNumberValue();
const valid = validators.isNumberValue(mock);
assert.equal(valid, true);
});
test("BooleanValue", () => {
const mock = mocks.mockBooleanValue();
const valid = validators.isBooleanValue(mock);
assert.equal(valid, true);
});
test("StringValue", () => {
const mock = mocks.mockStringValue();
const valid = validators.isStringValue(mock);
assert.equal(valid, true);
});
test("NonEmptyStringValue", () => {
const mock = mocks.mockNonEmptyStringValue();
const valid = validators.isNonEmptyStringValue(mock);
assert.equal(valid, true);
});
test("Amount", () => {
const mock = mocks.mockAmount();
const valid = validators.isAmount(mock);
assert.equal(valid, true);
});
test("Schema", () => {
const mock = mocks.mockSchema();
const valid = validators.isSchema(mock);
assert.equal(valid, true);
});
test("UniqueItems", () => {
const mock = mocks.mockUniqueItems();
const valid = validators.isUniqueItems(mock);
assert.equal(valid, true);
});
test("TypesItems", () => {
const mock = mocks.mockTypesItems();
const valid = validators.isTypesItems(mock);
assert.equal(valid, true);
});
