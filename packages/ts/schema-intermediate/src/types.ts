// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.8.13                         -- www.JsonSchema42.org
/**
JsonSchema42 intermediate schema
*/
export type SchemaJson = ((
{
"$schema": Schema,
"schemas": Schemas,
}
));
export type Node = ((
{
"title"?: Title,
"description"?: Description,
"examples"?: Examples,
"deprecated": Deprecated,
"types": Types,
"reference"?: Reference,
"oneOf"?: OneOf,
"anyOf"?: AnyOf,
"allOf"?: AllOf,
"if"?: If,
"then"?: Then,
"else"?: Else,
"not"?: Not,
"dependentSchemas"?: DependentSchemas,
"objectProperties"?: ObjectProperties,
"mapProperties"?: MapProperties,
"patternProperties"?: PatternProperties,
"propertyNames"?: PropertyNames,
"tupleItems"?: TupleItems,
"arrayItems"?: ArrayItems,
"contains"?: Contains,
"options"?: Options,
"minimumInclusive"?: MinimumInclusive,
"minimumExclusive"?: MinimumExclusive,
"maximumInclusive"?: MaximumInclusive,
"maximumExclusive"?: MaximumExclusive,
"multipleOf"?: MultipleOf,
"minimumLength"?: MinimumLength,
"maximumLength"?: MaximumLength,
"valuePattern"?: ValuePattern,
"valueFormat"?: ValueFormat,
"minimumItems"?: MinimumItems,
"maximumItems"?: MaximumItems,
"uniqueItems"?: UniqueItems,
"required"?: Required,
"minimumProperties"?: MinimumProperties,
"maximumProperties"?: MaximumProperties,
}
));
export type NodeReference = ((string));
export type IntegerValue = ((number));
export type NumberValue = ((number));
export type BooleanValue = ((boolean));
export type StringValue = ((string));
export type NonEmptyStringValue = ((string));
export type Amount = ((number));
export type Schema = (("https://schema.JsonSchema42.org/jns42-intermediate/schema.json"));
export type Schemas = ((
{
[key: string]: SchemasAdditionalProperties,
}
));
export type Title = (NonEmptyStringValue);
export type Description = (NonEmptyStringValue);
export type Examples = (((ExamplesItems)[]));
export type Deprecated = (BooleanValue);
/**
What types does this schema describe
*/
export type Types = (((TypesItems)[]));
export type Reference = (NodeReference);
export type OneOf = (((OneOfItems)[]));
export type AnyOf = (((AnyOfItems)[]));
export type AllOf = (((AllOfItems)[]));
export type If = (NodeReference);
export type Then = (NodeReference);
export type Else = (NodeReference);
export type Not = (NodeReference);
export type DependentSchemas = ((
{
[key: string]: DependentSchemasAdditionalProperties,
}
));
export type ObjectProperties = ((
{
[key: string]: ObjectPropertiesAdditionalProperties,
}
));
export type MapProperties = (NodeReference);
export type PatternProperties = ((
{
[key: string]: PatternPropertiesAdditionalProperties,
}
));
export type PropertyNames = (NodeReference);
export type TupleItems = (((TupleItemsItems)[]));
export type ArrayItems = (NodeReference);
export type Contains = (NodeReference);
export type Options = (((OptionsItems)[]));
export type MinimumInclusive = (NumberValue);
export type MinimumExclusive = (NumberValue);
export type MaximumInclusive = (NumberValue);
export type MaximumExclusive = (NumberValue);
export type MultipleOf = (NumberValue);
export type MinimumLength = (Amount);
export type MaximumLength = (Amount);
export type ValuePattern = (NonEmptyStringValue);
export type ValueFormat = (NonEmptyStringValue);
export type MinimumItems = (Amount);
export type MaximumItems = (Amount);
export type UniqueItems = ((boolean));
export type Required = (((RequiredItems)[]));
export type MinimumProperties = (Amount);
export type MaximumProperties = (Amount);
export type SchemasAdditionalProperties = (Node);
export type ExamplesItems = ((any));
export type TypesItems = (("never" |
"any" |
"null" |
"boolean" |
"integer" |
"number" |
"string" |
"array" |
"map"));
export type OneOfItems = (NodeReference);
export type AnyOfItems = (NodeReference);
export type AllOfItems = (NodeReference);
export type DependentSchemasAdditionalProperties = (NodeReference);
export type ObjectPropertiesAdditionalProperties = (NodeReference);
export type PatternPropertiesAdditionalProperties = (NodeReference);
export type TupleItemsItems = (NodeReference);
export type OptionsItems = ((any));
export type RequiredItems = (StringValue);
