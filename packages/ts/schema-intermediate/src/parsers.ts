// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.8.9                          -- www.JsonSchema42.org
export function parseSchemaJson(value: unknown): unknown {
return _parseMapSchemaJson(value);
}
function _parseMapSchemaJson(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "$schema": {
const propertyValue = parseSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schemas": {
const propertyValue = parseSchemas(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseNode(value: unknown): unknown {
return _parseMapNode(value);
}
function _parseMapNode(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "title": {
const propertyValue = parseTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "types": {
const propertyValue = parseTypes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "reference": {
const propertyValue = parseReference(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "oneOf": {
const propertyValue = parseOneOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "anyOf": {
const propertyValue = parseAnyOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allOf": {
const propertyValue = parseAllOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "if": {
const propertyValue = parseIf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "then": {
const propertyValue = parseThen(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "else": {
const propertyValue = parseElse(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "not": {
const propertyValue = parseNot(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "dependentSchemas": {
const propertyValue = parseDependentSchemas(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "objectProperties": {
const propertyValue = parseObjectProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "mapProperties": {
const propertyValue = parseMapProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "patternProperties": {
const propertyValue = parsePatternProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "propertyNames": {
const propertyValue = parsePropertyNames(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tupleItems": {
const propertyValue = parseTupleItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "arrayItems": {
const propertyValue = parseArrayItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "contains": {
const propertyValue = parseContains(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "options": {
const propertyValue = parseOptions(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimumInclusive": {
const propertyValue = parseMinimumInclusive(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimumExclusive": {
const propertyValue = parseMinimumExclusive(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximumInclusive": {
const propertyValue = parseMaximumInclusive(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximumExclusive": {
const propertyValue = parseMaximumExclusive(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimumLength": {
const propertyValue = parseMinimumLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximumLength": {
const propertyValue = parseMaximumLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "valuePattern": {
const propertyValue = parseValuePattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "valueFormat": {
const propertyValue = parseValueFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimumItems": {
const propertyValue = parseMinimumItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximumItems": {
const propertyValue = parseMaximumItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimumProperties": {
const propertyValue = parseMinimumProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximumProperties": {
const propertyValue = parseMaximumProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseNodeReference(value: unknown): unknown {
return _parseStringNodeReference(value);
}
function _parseStringNodeReference(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseIntegerValue(value: unknown): unknown {
return _parseIntegerIntegerValue(value);
}
function _parseIntegerIntegerValue(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseNumberValue(value: unknown): unknown {
return _parseNumberNumberValue(value);
}
function _parseNumberNumberValue(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseBooleanValue(value: unknown): unknown {
return _parseBooleanBooleanValue(value);
}
function _parseBooleanBooleanValue(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseStringValue(value: unknown): unknown {
return _parseStringStringValue(value);
}
function _parseStringStringValue(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseNonEmptyStringValue(value: unknown): unknown {
return _parseStringNonEmptyStringValue(value);
}
function _parseStringNonEmptyStringValue(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAmount(value: unknown): unknown {
return _parseIntegerAmount(value);
}
function _parseIntegerAmount(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseSchema(value: unknown): unknown {
return _parseStringSchema(value);
}
function _parseStringSchema(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemas(value: unknown): unknown {
return _parseMapSchemas(value);
}
function _parseMapSchemas(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseSchemasAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseTitle(value: unknown): unknown {
return _parseReferenceTitle(value);
}
function _parseReferenceTitle(value: unknown): unknown {
return parseNonEmptyStringValue(value);
}
export function parseDescription(value: unknown): unknown {
return _parseReferenceDescription(value);
}
function _parseReferenceDescription(value: unknown): unknown {
return parseNonEmptyStringValue(value);
}
export function parseExamples(value: unknown): unknown {
return _parseArrayExamples(value);
}
function _parseArrayExamples(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseExamplesItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseDeprecated(value: unknown): unknown {
return _parseReferenceDeprecated(value);
}
function _parseReferenceDeprecated(value: unknown): unknown {
return parseBooleanValue(value);
}
export function parseTypes(value: unknown): unknown {
return _parseArrayTypes(value);
}
function _parseArrayTypes(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseTypesItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseReference(value: unknown): unknown {
return _parseReferenceReference(value);
}
function _parseReferenceReference(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseOneOf(value: unknown): unknown {
return _parseArrayOneOf(value);
}
function _parseArrayOneOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOneOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseAnyOf(value: unknown): unknown {
return _parseArrayAnyOf(value);
}
function _parseArrayAnyOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAnyOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseAllOf(value: unknown): unknown {
return _parseArrayAllOf(value);
}
function _parseArrayAllOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAllOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseIf(value: unknown): unknown {
return _parseReferenceIf(value);
}
function _parseReferenceIf(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseThen(value: unknown): unknown {
return _parseReferenceThen(value);
}
function _parseReferenceThen(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseElse(value: unknown): unknown {
return _parseReferenceElse(value);
}
function _parseReferenceElse(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseNot(value: unknown): unknown {
return _parseReferenceNot(value);
}
function _parseReferenceNot(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseDependentSchemas(value: unknown): unknown {
return _parseMapDependentSchemas(value);
}
function _parseMapDependentSchemas(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseDependentSchemasAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseObjectProperties(value: unknown): unknown {
return _parseMapObjectProperties(value);
}
function _parseMapObjectProperties(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseObjectPropertiesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseMapProperties(value: unknown): unknown {
return _parseReferenceMapProperties(value);
}
function _parseReferenceMapProperties(value: unknown): unknown {
return parseNodeReference(value);
}
export function parsePatternProperties(value: unknown): unknown {
return _parseMapPatternProperties(value);
}
function _parseMapPatternProperties(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePatternPropertiesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePropertyNames(value: unknown): unknown {
return _parseReferencePropertyNames(value);
}
function _parseReferencePropertyNames(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseTupleItems(value: unknown): unknown {
return _parseArrayTupleItems(value);
}
function _parseArrayTupleItems(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseTupleItemsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseArrayItems(value: unknown): unknown {
return _parseReferenceArrayItems(value);
}
function _parseReferenceArrayItems(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseContains(value: unknown): unknown {
return _parseReferenceContains(value);
}
function _parseReferenceContains(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseOptions(value: unknown): unknown {
return _parseArrayOptions(value);
}
function _parseArrayOptions(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOptionsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseMinimumInclusive(value: unknown): unknown {
return _parseReferenceMinimumInclusive(value);
}
function _parseReferenceMinimumInclusive(value: unknown): unknown {
return parseNumberValue(value);
}
export function parseMinimumExclusive(value: unknown): unknown {
return _parseReferenceMinimumExclusive(value);
}
function _parseReferenceMinimumExclusive(value: unknown): unknown {
return parseNumberValue(value);
}
export function parseMaximumInclusive(value: unknown): unknown {
return _parseReferenceMaximumInclusive(value);
}
function _parseReferenceMaximumInclusive(value: unknown): unknown {
return parseNumberValue(value);
}
export function parseMaximumExclusive(value: unknown): unknown {
return _parseReferenceMaximumExclusive(value);
}
function _parseReferenceMaximumExclusive(value: unknown): unknown {
return parseNumberValue(value);
}
export function parseMultipleOf(value: unknown): unknown {
return _parseReferenceMultipleOf(value);
}
function _parseReferenceMultipleOf(value: unknown): unknown {
return parseNumberValue(value);
}
export function parseMinimumLength(value: unknown): unknown {
return _parseReferenceMinimumLength(value);
}
function _parseReferenceMinimumLength(value: unknown): unknown {
return parseAmount(value);
}
export function parseMaximumLength(value: unknown): unknown {
return _parseReferenceMaximumLength(value);
}
function _parseReferenceMaximumLength(value: unknown): unknown {
return parseAmount(value);
}
export function parseValuePattern(value: unknown): unknown {
return _parseReferenceValuePattern(value);
}
function _parseReferenceValuePattern(value: unknown): unknown {
return parseNonEmptyStringValue(value);
}
export function parseValueFormat(value: unknown): unknown {
return _parseReferenceValueFormat(value);
}
function _parseReferenceValueFormat(value: unknown): unknown {
return parseNonEmptyStringValue(value);
}
export function parseMinimumItems(value: unknown): unknown {
return _parseReferenceMinimumItems(value);
}
function _parseReferenceMinimumItems(value: unknown): unknown {
return parseAmount(value);
}
export function parseMaximumItems(value: unknown): unknown {
return _parseReferenceMaximumItems(value);
}
function _parseReferenceMaximumItems(value: unknown): unknown {
return parseAmount(value);
}
export function parseUniqueItems(value: unknown): unknown {
return _parseBooleanUniqueItems(value);
}
function _parseBooleanUniqueItems(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseRequired(value: unknown): unknown {
return _parseArrayRequired(value);
}
function _parseArrayRequired(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseRequiredItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseMinimumProperties(value: unknown): unknown {
return _parseReferenceMinimumProperties(value);
}
function _parseReferenceMinimumProperties(value: unknown): unknown {
return parseAmount(value);
}
export function parseMaximumProperties(value: unknown): unknown {
return _parseReferenceMaximumProperties(value);
}
function _parseReferenceMaximumProperties(value: unknown): unknown {
return parseAmount(value);
}
export function parseSchemasAdditionalProperties(value: unknown): unknown {
return _parseReferenceSchemasAdditionalProperties(value);
}
function _parseReferenceSchemasAdditionalProperties(value: unknown): unknown {
return parseNode(value);
}
export function parseExamplesItems(value: unknown): unknown {
return _parseAnyExamplesItems(value);
}
function _parseAnyExamplesItems(value: unknown): unknown {
return value;
}
export function parseTypesItems(value: unknown): unknown {
return _parseStringTypesItems(value);
}
function _parseStringTypesItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOfItems(value: unknown): unknown {
return _parseReferenceOneOfItems(value);
}
function _parseReferenceOneOfItems(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseAnyOfItems(value: unknown): unknown {
return _parseReferenceAnyOfItems(value);
}
function _parseReferenceAnyOfItems(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseAllOfItems(value: unknown): unknown {
return _parseReferenceAllOfItems(value);
}
function _parseReferenceAllOfItems(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseDependentSchemasAdditionalProperties(value: unknown): unknown {
return _parseReferenceDependentSchemasAdditionalProperties(value);
}
function _parseReferenceDependentSchemasAdditionalProperties(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseObjectPropertiesAdditionalProperties(value: unknown): unknown {
return _parseReferenceObjectPropertiesAdditionalProperties(value);
}
function _parseReferenceObjectPropertiesAdditionalProperties(value: unknown): unknown {
return parseNodeReference(value);
}
export function parsePatternPropertiesAdditionalProperties(value: unknown): unknown {
return _parseReferencePatternPropertiesAdditionalProperties(value);
}
function _parseReferencePatternPropertiesAdditionalProperties(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseTupleItemsItems(value: unknown): unknown {
return _parseReferenceTupleItemsItems(value);
}
function _parseReferenceTupleItemsItems(value: unknown): unknown {
return parseNodeReference(value);
}
export function parseOptionsItems(value: unknown): unknown {
return _parseAnyOptionsItems(value);
}
function _parseAnyOptionsItems(value: unknown): unknown {
return value;
}
export function parseRequiredItems(value: unknown): unknown {
return _parseReferenceRequiredItems(value);
}
function _parseReferenceRequiredItems(value: unknown): unknown {
return parseStringValue(value);
}
