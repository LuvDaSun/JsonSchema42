// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.9.6                          -- www.JsonSchema42.org
//
import * as types from "./types.js";
export interface ValidationError {
typeName: string,
}
/**
* @description Core schema meta-schema
* @see {@link http://json-schema.org/draft-04/schema#}
*/
export function isSchemaDocument(value: unknown, errors = new Array<ValidationError>()): value is types.SchemaDocument {
if (!((value !== null) &&
(typeof value === "object") &&
(!Array.isArray(value)) &&
(
(()=>{
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "id":
if(!isId(propertyValue, errors)) {
return false;
}
break;
case "$schema":
if(!isSchema(propertyValue, errors)) {
return false;
}
break;
case "title":
if(!isTitle(propertyValue, errors)) {
return false;
}
break;
case "description":
if(!isDescription(propertyValue, errors)) {
return false;
}
break;
case "default":
if(!isDefault(propertyValue, errors)) {
return false;
}
break;
case "multipleOf":
if(!isMultipleOf(propertyValue, errors)) {
return false;
}
break;
case "maximum":
if(!isMaximum(propertyValue, errors)) {
return false;
}
break;
case "exclusiveMaximum":
if(!isExclusiveMaximum(propertyValue, errors)) {
return false;
}
break;
case "minimum":
if(!isMinimum(propertyValue, errors)) {
return false;
}
break;
case "exclusiveMinimum":
if(!isExclusiveMinimum(propertyValue, errors)) {
return false;
}
break;
case "maxLength":
if(!isMaxLength(propertyValue, errors)) {
return false;
}
break;
case "minLength":
if(!isMinLength(propertyValue, errors)) {
return false;
}
break;
case "pattern":
if(!isPattern(propertyValue, errors)) {
return false;
}
break;
case "additionalItems":
if(!isAdditionalItems(propertyValue, errors)) {
return false;
}
break;
case "items":
if(!isPropertiesItems(propertyValue, errors)) {
return false;
}
break;
case "maxItems":
if(!isMaxItems(propertyValue, errors)) {
return false;
}
break;
case "minItems":
if(!isMinItems(propertyValue, errors)) {
return false;
}
break;
case "uniqueItems":
if(!isUniqueItems(propertyValue, errors)) {
return false;
}
break;
case "maxProperties":
if(!isMaxProperties(propertyValue, errors)) {
return false;
}
break;
case "minProperties":
if(!isMinProperties(propertyValue, errors)) {
return false;
}
break;
case "required":
if(!isRequired(propertyValue, errors)) {
return false;
}
break;
case "additionalProperties":
if(!isPropertiesAdditionalProperties(propertyValue, errors)) {
return false;
}
break;
case "definitions":
if(!isDefinitions(propertyValue, errors)) {
return false;
}
break;
case "properties":
if(!isProperties(propertyValue, errors)) {
return false;
}
break;
case "patternProperties":
if(!isPatternProperties(propertyValue, errors)) {
return false;
}
break;
case "dependencies":
if(!isDependencies(propertyValue, errors)) {
return false;
}
break;
case "enum":
if(!isEnum(propertyValue, errors)) {
return false;
}
break;
case "type":
if(!isType(propertyValue, errors)) {
return false;
}
break;
case "format":
if(!isFormat(propertyValue, errors)) {
return false;
}
break;
case "allOf":
if(!isAllOf(propertyValue, errors)) {
return false;
}
break;
case "anyOf":
if(!isAnyOf(propertyValue, errors)) {
return false;
}
break;
case "oneOf":
if(!isOneOf(propertyValue, errors)) {
return false;
}
break;
case "not":
if(!isNot(propertyValue, errors)) {
return false;
}
break;
}
}
return true;
})()
))) {
errors.push({"typeName":"SchemaDocument"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/schemaArray}
*/
export function isSchemaArray(value: unknown, errors = new Array<ValidationError>()): value is types.SchemaArray {
if (!((Array.isArray(value)) &&
(
(()=>{
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isSchemaArrayItems(elementValue, errors)) {
return false;
}
}
return true;
})()
))) {
errors.push({"typeName":"SchemaArray"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveInteger}
*/
export function isPositiveInteger(value: unknown, errors = new Array<ValidationError>()): value is types.PositiveInteger {
if (!((typeof value === "number") &&
(!isNaN(value)) &&
(value % 1 === 0))) {
errors.push({"typeName":"PositiveInteger"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0}
*/
export function isPositiveIntegerDefault0(value: unknown, errors = new Array<ValidationError>()): value is types.PositiveIntegerDefault0 {
if (!((typeof value === "number") &&
(!isNaN(value)) &&
(value % 1 === 0))) {
errors.push({"typeName":"PositiveIntegerDefault0"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/simpleTypes}
*/
export function isSimpleTypes(value: unknown, errors = new Array<ValidationError>()): value is types.SimpleTypes {
if (!((typeof value === "string") &&
(value === "array" ||
value === "boolean" ||
value === "integer" ||
value === "null" ||
value === "number" ||
value === "object" ||
value === "string"))) {
errors.push({"typeName":"SimpleTypes"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/stringArray}
*/
export function isStringArray(value: unknown, errors = new Array<ValidationError>()): value is types.StringArray {
if (!((Array.isArray(value)) &&
(
(()=>{
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isStringArrayItems(elementValue, errors)) {
return false;
}
}
return true;
})()
))) {
errors.push({"typeName":"StringArray"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/id}
*/
export function isId(value: unknown, errors = new Array<ValidationError>()): value is types.Id {
if (!((typeof value === "string"))) {
errors.push({"typeName":"Id"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/$schema}
*/
export function isSchema(value: unknown, errors = new Array<ValidationError>()): value is types.Schema {
if (!((typeof value === "string"))) {
errors.push({"typeName":"Schema"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/title}
*/
export function isTitle(value: unknown, errors = new Array<ValidationError>()): value is types.Title {
if (!((typeof value === "string"))) {
errors.push({"typeName":"Title"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/description}
*/
export function isDescription(value: unknown, errors = new Array<ValidationError>()): value is types.Description {
if (!((typeof value === "string"))) {
errors.push({"typeName":"Description"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/default}
*/
export function isDefault(value: unknown, errors = new Array<ValidationError>()): value is types.Default {
if (!((
// unknown
true
))) {
errors.push({"typeName":"Default"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/multipleOf}
*/
export function isMultipleOf(value: unknown, errors = new Array<ValidationError>()): value is types.MultipleOf {
if (!((typeof value === "number") &&
(!isNaN(value)))) {
errors.push({"typeName":"MultipleOf"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/maximum}
*/
export function isMaximum(value: unknown, errors = new Array<ValidationError>()): value is types.Maximum {
if (!((typeof value === "number") &&
(!isNaN(value)))) {
errors.push({"typeName":"Maximum"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum}
*/
export function isExclusiveMaximum(value: unknown, errors = new Array<ValidationError>()): value is types.ExclusiveMaximum {
if (!((typeof value === "boolean"))) {
errors.push({"typeName":"ExclusiveMaximum"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/minimum}
*/
export function isMinimum(value: unknown, errors = new Array<ValidationError>()): value is types.Minimum {
if (!((typeof value === "number") &&
(!isNaN(value)))) {
errors.push({"typeName":"Minimum"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum}
*/
export function isExclusiveMinimum(value: unknown, errors = new Array<ValidationError>()): value is types.ExclusiveMinimum {
if (!((typeof value === "boolean"))) {
errors.push({"typeName":"ExclusiveMinimum"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/maxLength}
*/
export function isMaxLength(value: unknown, errors = new Array<ValidationError>()): value is types.MaxLength {
if (!((isPositiveInteger(value, errors)))) {
errors.push({"typeName":"MaxLength"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/minLength}
*/
export function isMinLength(value: unknown, errors = new Array<ValidationError>()): value is types.MinLength {
if (!((isPositiveIntegerDefault0(value, errors)))) {
errors.push({"typeName":"MinLength"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/pattern}
*/
export function isPattern(value: unknown, errors = new Array<ValidationError>()): value is types.Pattern {
if (!((typeof value === "string"))) {
errors.push({"typeName":"Pattern"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/additionalItems}
*/
export function isAdditionalItems(value: unknown, errors = new Array<ValidationError>()): value is types.AdditionalItems {
if (!((
(()=>{
let count = 0;
if(isAdditionalItems0(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
if(isAdditionalItems1(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
return count === 1;
})()
))) {
errors.push({"typeName":"AdditionalItems"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/items}
*/
export function isPropertiesItems(value: unknown, errors = new Array<ValidationError>()): value is types.PropertiesItems {
if (!((
(()=>{
let count = 0;
if(isItems0(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
if(isItems1(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
return count === 1;
})()
))) {
errors.push({"typeName":"PropertiesItems"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/maxItems}
*/
export function isMaxItems(value: unknown, errors = new Array<ValidationError>()): value is types.MaxItems {
if (!((isPositiveInteger(value, errors)))) {
errors.push({"typeName":"MaxItems"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/minItems}
*/
export function isMinItems(value: unknown, errors = new Array<ValidationError>()): value is types.MinItems {
if (!((isPositiveIntegerDefault0(value, errors)))) {
errors.push({"typeName":"MinItems"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/uniqueItems}
*/
export function isUniqueItems(value: unknown, errors = new Array<ValidationError>()): value is types.UniqueItems {
if (!((typeof value === "boolean"))) {
errors.push({"typeName":"UniqueItems"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/maxProperties}
*/
export function isMaxProperties(value: unknown, errors = new Array<ValidationError>()): value is types.MaxProperties {
if (!((isPositiveInteger(value, errors)))) {
errors.push({"typeName":"MaxProperties"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/minProperties}
*/
export function isMinProperties(value: unknown, errors = new Array<ValidationError>()): value is types.MinProperties {
if (!((isPositiveIntegerDefault0(value, errors)))) {
errors.push({"typeName":"MinProperties"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/required}
*/
export function isRequired(value: unknown, errors = new Array<ValidationError>()): value is types.Required {
if (!((isStringArray(value, errors)))) {
errors.push({"typeName":"Required"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/additionalProperties}
*/
export function isPropertiesAdditionalProperties(value: unknown, errors = new Array<ValidationError>()): value is types.PropertiesAdditionalProperties {
if (!((
(()=>{
let count = 0;
if(isAdditionalProperties0(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
if(isAdditionalProperties1(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
return count === 1;
})()
))) {
errors.push({"typeName":"PropertiesAdditionalProperties"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/definitions}
*/
export function isDefinitions(value: unknown, errors = new Array<ValidationError>()): value is types.Definitions {
if (!((value !== null) &&
(typeof value === "object") &&
(!Array.isArray(value)) &&
(
(()=>{
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!(typeof propertyName === "string")) {
return false;
}
if(!isDefinitionsAdditionalProperties(propertyValue, errors)) {
return false;
}
}
return true;
})()
))) {
errors.push({"typeName":"Definitions"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/properties}
*/
export function isProperties(value: unknown, errors = new Array<ValidationError>()): value is types.Properties {
if (!((value !== null) &&
(typeof value === "object") &&
(!Array.isArray(value)) &&
(
(()=>{
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!(typeof propertyName === "string")) {
return false;
}
if(!isPropertiesPropertiesAdditionalProperties(propertyValue, errors)) {
return false;
}
}
return true;
})()
))) {
errors.push({"typeName":"Properties"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/patternProperties}
*/
export function isPatternProperties(value: unknown, errors = new Array<ValidationError>()): value is types.PatternProperties {
if (!((value !== null) &&
(typeof value === "object") &&
(!Array.isArray(value)) &&
(
(()=>{
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!(typeof propertyName === "string")) {
return false;
}
if(!isPatternPropertiesAdditionalProperties(propertyValue, errors)) {
return false;
}
}
return true;
})()
))) {
errors.push({"typeName":"PatternProperties"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/dependencies}
*/
export function isDependencies(value: unknown, errors = new Array<ValidationError>()): value is types.Dependencies {
if (!((value !== null) &&
(typeof value === "object") &&
(!Array.isArray(value)) &&
(
(()=>{
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
if(!(typeof propertyName === "string")) {
return false;
}
if(!isDependenciesAdditionalProperties(propertyValue, errors)) {
return false;
}
}
return true;
})()
))) {
errors.push({"typeName":"Dependencies"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/enum}
*/
export function isEnum(value: unknown, errors = new Array<ValidationError>()): value is types.Enum {
if (!((Array.isArray(value)) &&
(
(()=>{
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!(
// any
true
)) {
return false;
}
}
return true;
})()
))) {
errors.push({"typeName":"Enum"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type}
*/
export function isType(value: unknown, errors = new Array<ValidationError>()): value is types.Type {
if (!((
(()=>{
let count = 0;
if(isType0(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
if(isType1(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
return count === 1;
})()
))) {
errors.push({"typeName":"Type"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/format}
*/
export function isFormat(value: unknown, errors = new Array<ValidationError>()): value is types.Format {
if (!((typeof value === "string"))) {
errors.push({"typeName":"Format"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/allOf}
*/
export function isAllOf(value: unknown, errors = new Array<ValidationError>()): value is types.AllOf {
if (!((isSchemaArray(value, errors)))) {
errors.push({"typeName":"AllOf"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/anyOf}
*/
export function isAnyOf(value: unknown, errors = new Array<ValidationError>()): value is types.AnyOf {
if (!((isSchemaArray(value, errors)))) {
errors.push({"typeName":"AnyOf"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/oneOf}
*/
export function isOneOf(value: unknown, errors = new Array<ValidationError>()): value is types.OneOf {
if (!((isSchemaArray(value, errors)))) {
errors.push({"typeName":"OneOf"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/not}
*/
export function isNot(value: unknown, errors = new Array<ValidationError>()): value is types.Not {
if (!((isSchemaDocument(value, errors)))) {
errors.push({"typeName":"Not"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/schemaArray/items}
*/
export function isSchemaArrayItems(value: unknown, errors = new Array<ValidationError>()): value is types.SchemaArrayItems {
if (!((isSchemaDocument(value, errors)))) {
errors.push({"typeName":"SchemaArrayItems"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0/allOf/0}
*/
export function isPositiveIntegerDefault00(value: unknown, errors = new Array<ValidationError>()): value is types.PositiveIntegerDefault00 {
if (!((isPositiveInteger(value, errors)))) {
errors.push({"typeName":"PositiveIntegerDefault00"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0/allOf/1}
*/
export function isPositiveIntegerDefault01(value: unknown, errors = new Array<ValidationError>()): value is types.PositiveIntegerDefault01 {
if (!((
// unknown
true
))) {
errors.push({"typeName":"PositiveIntegerDefault01"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/stringArray/items}
*/
export function isStringArrayItems(value: unknown, errors = new Array<ValidationError>()): value is types.StringArrayItems {
if (!((typeof value === "string"))) {
errors.push({"typeName":"StringArrayItems"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/additionalItems/anyOf/0}
*/
export function isAdditionalItems0(value: unknown, errors = new Array<ValidationError>()): value is types.AdditionalItems0 {
if (!((typeof value === "boolean"))) {
errors.push({"typeName":"AdditionalItems0"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/additionalItems/anyOf/1}
*/
export function isAdditionalItems1(value: unknown, errors = new Array<ValidationError>()): value is types.AdditionalItems1 {
if (!((isSchemaDocument(value, errors)))) {
errors.push({"typeName":"AdditionalItems1"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/items/anyOf/0}
*/
export function isItems0(value: unknown, errors = new Array<ValidationError>()): value is types.Items0 {
if (!((isSchemaDocument(value, errors)))) {
errors.push({"typeName":"Items0"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/items/anyOf/1}
*/
export function isItems1(value: unknown, errors = new Array<ValidationError>()): value is types.Items1 {
if (!((isSchemaArray(value, errors)))) {
errors.push({"typeName":"Items1"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/additionalProperties/anyOf/0}
*/
export function isAdditionalProperties0(value: unknown, errors = new Array<ValidationError>()): value is types.AdditionalProperties0 {
if (!((typeof value === "boolean"))) {
errors.push({"typeName":"AdditionalProperties0"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/additionalProperties/anyOf/1}
*/
export function isAdditionalProperties1(value: unknown, errors = new Array<ValidationError>()): value is types.AdditionalProperties1 {
if (!((isSchemaDocument(value, errors)))) {
errors.push({"typeName":"AdditionalProperties1"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/definitions/additionalProperties}
*/
export function isDefinitionsAdditionalProperties(value: unknown, errors = new Array<ValidationError>()): value is types.DefinitionsAdditionalProperties {
if (!((isSchemaDocument(value, errors)))) {
errors.push({"typeName":"DefinitionsAdditionalProperties"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/properties/additionalProperties}
*/
export function isPropertiesPropertiesAdditionalProperties(value: unknown, errors = new Array<ValidationError>()): value is types.PropertiesPropertiesAdditionalProperties {
if (!((isSchemaDocument(value, errors)))) {
errors.push({"typeName":"PropertiesPropertiesAdditionalProperties"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/patternProperties/additionalProperties}
*/
export function isPatternPropertiesAdditionalProperties(value: unknown, errors = new Array<ValidationError>()): value is types.PatternPropertiesAdditionalProperties {
if (!((isSchemaDocument(value, errors)))) {
errors.push({"typeName":"PatternPropertiesAdditionalProperties"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/dependencies/additionalProperties}
*/
export function isDependenciesAdditionalProperties(value: unknown, errors = new Array<ValidationError>()): value is types.DependenciesAdditionalProperties {
if (!((
(()=>{
let count = 0;
if(isDependencies0(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
if(isDependencies1(value, errors)) {
count++;
// if(count > 1) {
//   return false;
// }
}
return count === 1;
})()
))) {
errors.push({"typeName":"DependenciesAdditionalProperties"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type/anyOf/0}
*/
export function isType0(value: unknown, errors = new Array<ValidationError>()): value is types.Type0 {
if (!((isSimpleTypes(value, errors)))) {
errors.push({"typeName":"Type0"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type/anyOf/1}
*/
export function isType1(value: unknown, errors = new Array<ValidationError>()): value is types.Type1 {
if (!((Array.isArray(value)) &&
(
(()=>{
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isTypeItems(elementValue, errors)) {
return false;
}
}
return true;
})()
))) {
errors.push({"typeName":"Type1"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/dependencies/additionalProperties/anyOf/0}
*/
export function isDependencies0(value: unknown, errors = new Array<ValidationError>()): value is types.Dependencies0 {
if (!((isSchemaDocument(value, errors)))) {
errors.push({"typeName":"Dependencies0"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/dependencies/additionalProperties/anyOf/1}
*/
export function isDependencies1(value: unknown, errors = new Array<ValidationError>()): value is types.Dependencies1 {
if (!((isStringArray(value, errors)))) {
errors.push({"typeName":"Dependencies1"})
return false;
}
return true;
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type/anyOf/1/items}
*/
export function isTypeItems(value: unknown, errors = new Array<ValidationError>()): value is types.TypeItems {
if (!((isSimpleTypes(value, errors)))) {
errors.push({"typeName":"TypeItems"})
return false;
}
return true;
}
